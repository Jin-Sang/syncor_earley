<file>: 
    | <statements> <ENDMARKER> 
    | <ENDMARKER> ★
<interactive>:
    | <statement_newline> ★
<eval>:
    | <expressions> <NEWLINE*> <ENDMARKER> ★

<NEWLINE*>: 
    | <NEWLINE*> <NEWLINE>
    | <NEWLINE> 
    | ★

<func_type>:
    | '(' ')' '->' <expression> <NEWLINE*> <ENDMARKER>
    | '(' <type_expressions> ')' '->' <expression> <NEWLINE*> <ENDMARKER> ★

<statements>:
    | <statements> <statement>  
    | <statement> ★

<statement>:
    | <compound_stmt>
    | <simple_stmts> ★

<statement_newline>: 
    | <compound_stmt> <NEWLINE>
    | <simple_stmts>
    | <NEWLINE> 
    | <ENDMARKER> ★

<simple_stmts>:
    | <simple_stmt> <NEWLINE>
    | <;_simple_stmt> <NEWLINE>
    | <;_simple_stmt> ';' <NEWLINE>  ★

<;_simple_stmt>:
    | <;_simple_stmt> ';' <simple_stmt> 
    | <simple_stmt> ★

<simple_stmt>:
    | <assignment>
    | <type_alias>
    | <star_expressions>
    | <return_stmt>
    | <import_stmt>
    | <raise_stmt>
    | 'pass' 
    | <del_stmt>
    | <yield_stmt>
    | <assert_stmt>
    | 'break' 
    | 'continue' 
    | <global_stmt>
    | <nonlocal_stmt> ★
<compound_stmt>:
    | <function_def>
    | <if_stmt>
    | <class_def>
    | <with_stmt>
    | <for_stmt>
    | <try_stmt>
    | <while_stmt>
    | <match_stmt> ★
<assignment>:
    | <NAME> ':' <expression> '=' <annotated_rhs>
    | <NAME> ':' <expression> 
    | '(' <single_target> ')' ':' <expression> '=' <annotated_rhs> 
    | '(' <single_target> ')' ':' <expression>  
    | <single_subscript_attribute_target> ':' <expression> '=' <annotated_rhs>
    | <single_subscript_attribute_target> ':' <expression>  
    | <star_target_=> <yield_expr> <TYPE_COMMENT>
    | <star_target_=> <yield_expr> 
    | <star_target_=> <star_expressions> <TYPE_COMMENT>
    | <star_target_=> <star_expressions> 
    | <single_target> <augassign> <yield_expr>
    | <single_target> <augassign> <star_expressions>  ★

<star_target_=>:
    | <star_target_=> <star_target> '='
    | <star_target> '=' ★

<annotated_rhs>:
    | <yield_expr>
    | <star_expressions> ★
<augassign>:
    | '+=' 
    | '-=' 
    | '*=' 
    | '@=' 
    | '/=' 
    | '%=' 
    | '&=' 
    | '|=' 
    | '^=' 
    | '<<=' 
    | '>>=' 
    | '**=' 
    | '//='  ★
<return_stmt>:
    | 'return' 
    | 'return' <star_expressions> ★
<raise_stmt>:
    | 'raise' <expression> 'from' <expression> 
    | 'raise' <expression>  
    | 'raise'  ★

<,_NAME>:
    | <,_NAME> ',' <NAME>
    | <NAME> ★

<global_stmt>:
    | 'global' <,_NAME>  ★
<nonlocal_stmt>:
    | 'nonlocal' <,_NAME>  ★
<del_stmt>:
    | 'del' <del_targets> ';'
    | 'del' <del_targets> <NEWLINE>  ★
<yield_stmt>:
    | <yield_expr>  ★
<assert_stmt>: 
    | 'assert' <expression> 
    | 'assert' <expression> ',' <expression>  ★
<import_stmt>:
    | <import_name>
    | <import_from> ★
<import_name>:
    | 'import' <dotted_as_names> ★

<import_from>:
    | 'from' <._..._*> <dotted_name> 'import' <import_from_targets>
    | 'from' <._..._+> 'import' <import_from_targets>  ★
<._..._*>:
    | <._..._*> '.'
    | <._..._*> '...'
    | '.'
    | '...' 
    | ★
<._..._+>:
    | <._..._*> '.'
    | <._..._*> '...'
    | '.'
    | '...' ★

<import_from_targets>:
    | '(' <import_from_as_names> ')' 
    | '(' <import_from_as_names> ',' ')' 
    | <import_from_as_names> !','
    | '*'  ★
<import_from_as_names>:
    | <,_import_from_as_name_+>  ★

<,_import_from_as_name_+>:
    | <,_import_from_as_name_+> ',' <import_from_as_name>
    | <import_from_as_name> ★

<import_from_as_name>:
    | <NAME> 
    | <NAME> 'as' <NAME>  ★
<dotted_as_names>:
    | <,_dotted_as_name_+>  ★

<,_dotted_as_name_+>:
    | <,_dotted_as_name_+> ',' <dotted_as_name>
    | <dotted_as_name> ★

<dotted_as_name>:
    | <dotted_name>  
    | <dotted_name> 'as' <NAME>  ★
<dotted_name>:
    | <dotted_name> '.' <NAME>  
    | <NAME>  ★
<block>:
    | <NEWLINE> <INDENT> <statements> <DEDENT> 
    | <simple_stmts>  ★
<decorators>:
    | <@_named_expression_NEWLINE_+>  ★
<@_named_expression_NEWLINE_+>:
    | <@_named_expression_NEWLINE_+> '@' <named_expression> <NEWLINE>
    | '@' <named_expression> <NEWLINE> ★
<class_def>:
    | <decorators> <class_def_raw>
    | <class_def_raw> ★
<class_def_raw>:
    | 'class' <NAME> ':' <block>
    | 'class' <NAME> '(' ')' ':' <block>
    | 'class' <NAME> '(' <arguments> ')' ':' <block>
    | 'class' <NAME> <type_params> ':' <block>
    | 'class' <NAME> <type_params> '(' ')' ':' <block>
    | 'class' <NAME> <type_params> '(' <arguments> ')' ':' <block>  ★
<function_def>:
    | <decorators> <function_def_raw> 
    | <function_def_raw>  ★
<function_def_raw>:
    | 'def' <NAME> '(' ')' ':' <block> 
    | 'def' <NAME> '(' ')' ':' <func_type_comment> <block> 
    | 'def' <NAME> '(' ')' '->' <expression> ':' <block>
    | 'def' <NAME> '(' ')' '->' <expression> ':' <func_type_comment> <block>
    | 'def' <NAME> '(' <params> ')' ':' <block>
    | 'def' <NAME> '(' <params> ')' ':' <func_type_comment> <block>
    | 'def' <NAME> '(' <params> ')' '->' <expression> ':' <block>
    | 'def' <NAME> '(' <params> ')' '->' <expression> ':' <func_type_comment> <block>
    | 'def' <NAME> <type_params> '(' ')' ':' <block>
    | 'def' <NAME> <type_params> '(' ')' ':' <func_type_comment> <block>
    | 'def' <NAME> <type_params> '(' ')' '->' <expression> ':' <block> 
    | 'def' <NAME> <type_params> '(' ')' '->' <expression> ':' <func_type_comment> <block> 
    | 'def' <NAME> <type_params> '(' <params> ')' ':' <block>
    | 'def' <NAME> <type_params> '(' <params> ')' ':' <func_type_comment> <block> 
    | 'def' <NAME> <type_params> '(' <params> ')' '->' <expression> ':'  <block> 
    | 'def' <NAME> <type_params> '(' <params> ')' '->' <expression> ':' <func_type_comment> <block> 
    | <ASYNC> 'def' <NAME> '(' ')' ':' <block> 
    | <ASYNC> 'def' <NAME> '(' ')' ':' <func_type_comment> <block> 
    | <ASYNC> 'def' <NAME> '(' ')' '->' <expression> ':' <block>
    | <ASYNC> 'def' <NAME> '(' ')' '->' <expression> ':' <func_type_comment> <block>
    | <ASYNC> 'def' <NAME> '(' <params> ')' ':' <block>
    | <ASYNC> 'def' <NAME> '(' <params> ')' ':' <func_type_comment> <block>
    | <ASYNC> 'def' <NAME> '(' <params> ')' '->' <expression>  ':'  <block>
    | <ASYNC> 'def' <NAME> '(' <params> ')' '->' <expression>  ':' <func_type_comment> <block>
    | <ASYNC> 'def' <NAME> <type_params> '(' ')' ':' <block>
    | <ASYNC> 'def' <NAME> <type_params> '(' ')' ':' <func_type_comment> <block>
    | <ASYNC> 'def' <NAME> <type_params> '(' ')' '->' <expression> ':' <block> 
    | <ASYNC> 'def' <NAME> <type_params> '(' ')' '->' <expression> ':' <func_type_comment> <block> 
    | <ASYNC> 'def' <NAME> <type_params> '(' <params> ')' ':' <block>
    | <ASYNC> 'def' <NAME> <type_params> '(' <params> ')' ':' <func_type_comment> <block> 
    | <ASYNC> 'def' <NAME> <type_params> '(' <params> ')' '->' <expression> ':'  <block> 
    | <ASYNC> 'def' <NAME> <type_params> '(' <params> ')' '->' <expression> ':' <func_type_comment> <block> ★ 

<params>:
    | <parameters>   ★
<parameters>:
    | <slash_no_default> <param_no_default_*> <param_with_default_*>  
    | <slash_no_default> <param_no_default_*> <param_with_default_*> <star_etc>
    | <slash_with_default> <param_with_default_*> 
    | <slash_with_default> <param_with_default_*> <star_etc> 
    | <param_no_default_+> <param_with_default_*> 
    | <param_no_default_+> <param_with_default_*> <star_etc>
    | <param_with_default_+> 
    | <param_with_default_+> <star_etc>  
    | <star_etc>  ★
    
<param_no_default_*>:
    | <param_no_default_*> <param_no_default>
    | <param_no_default> 
    | ★

<param_no_default_+>:
    | <param_no_default_+> <param_no_default>
    | <param_no_default> ★

<param_with_default_*>:
    | <param_with_default_*> <param_with_default>
    | <param_with_default> 
    | ★

<param_with_default_+>:
    | <param_with_default_+> <param_with_default>
    | <param_with_default> ★


<slash_no_default>:
    | <param_no_default_+> '/' ',' 
    | <param_no_default_+> '/' ')'  ★ 
<slash_with_default>:
    | <param_no_default_*> <param_with_default_+> '/' ',' 
    | <param_no_default_*> <param_with_default_+> '/' ')'  ★
<star_etc>:
    | '*' <param_no_default> <param_maybe_default_*> 
    | '*' <param_no_default> <param_maybe_default_*> <kwds> 
    | '*' <param_no_default_star_annotation> <param_maybe_default_*> 
    | '*' <param_no_default_star_annotation> <param_maybe_default_*> <kwds> 
    | '*' ',' <param_maybe_default_+> 
    | '*' ',' <param_maybe_default_+> <kwds> 
    | <kwds>  ★
<param_maybe_default_*>:
    | <param_maybe_default_*> <param_maybe_default>
    | <param_maybe_default> 
    | ★

<param_maybe_default_+>:
    | <param_maybe_default_+> <param_maybe_default>
    | <param_maybe_default> ★

<kwds>:
    | '**' <param_no_default>  ★
<param_no_default>:
    | <param> ',' 
    | <param> ',' <TYPE_COMMENT> 
    | <param> ')'
    | <param> <TYPE_COMMENT> ')'  ★
<param_no_default_star_annotation>:
    | <param_star_annotation> ','  
    | <param_star_annotation> ',' <TYPE_COMMENT> 
    | <param_star_annotation> ',' ')' 
    | <param_star_annotation> <TYPE_COMMENT> ')'  ★
<param_with_default>:
    | <param> <default> ','  
    | <param> <default> ',' <TYPE_COMMENT> 
    | <param> <default> ')'
    | <param> <default> <TYPE_COMMENT> ')'  ★
<param_maybe_default>:
    | <param> ',' 
    | <param> ',' <TYPE_COMMENT>
    | <param> <default> ','
    | <param> <default> ',' <TYPE_COMMENT>
    | <param> ')'
    | <param> <TYPE_COMMENT> ')'
    | <param> <default> ')'
    | <param> <default> <TYPE_COMMENT> ')'  ★
<param>:
    | <NAME> 
    | <NAME> <annotation>  ★
<param_star_annotation>:
    | <NAME> <star_annotation>  ★
<annotation>:
    | ':' <expression>  ★
<star_annotation>:
    | ':' <star_expression>  ★
<default>:
    | '=' <expression>
    | <invalid_default> ★
<if_stmt>:
    | 'if' <named_expression> ':' <block elif_stmt>
    | 'if' <named_expression> ':' <block>  
    | 'if' <named_expression> ':' <block> <else_block>  ★
<elif_stmt>:
    | 'elif' <named_expression> ':' <block elif_stmt> 
    | 'elif' <named_expression> ':' <block> 
    | 'elif' <named_expression> ':' <block> <else_block>  ★
<else_block>:
    | 'else' ':' <block>  ★
<while_stmt>:
    | 'while' <named_expression> ':' <block> 
    | 'while' <named_expression> ':' <block> <else_block>  ★
<for_stmt>:
    | 'for' <star_targets> 'in' ~ <star_expressions> ':' <block> 
    | 'for' <star_targets> 'in' ~ <star_expressions> ':' <block> <else_block>
    | 'for' <star_targets> 'in' ~ <star_expressions> ':' <TYPE_COMMENT> <block> 
    | 'for' <star_targets> 'in' ~ <star_expressions> ':' <TYPE_COMMENT> <block> <else_block> 
    | <ASYNC> 'for' <star_targets> 'in' ~ <star_expressions> ':' <block> 
    | <ASYNC> 'for' <star_targets> 'in' ~ <star_expressions> ':' <block> <else_block>
    | <ASYNC> 'for' <star_targets> 'in' ~ <star_expressions> ':' <TYPE_COMMENT> <block> 
    | <ASYNC> 'for' <star_targets> 'in' ~ <star_expressions> ':' <TYPE_COMMENT> <block> <else_block>   ★ 
<with_stmt>:
    | 'with' '(' <,_with_item_+> ','? ')' ':' <block> 
    | 'with' <,_with_item_+> ':' <block>
    | 'with' <,_with_item_+> ':' <TYPE_COMMENT> <block> 
    | <ASYNC> 'with' '(' <,_with_item_+> ','? ')' ':' <block> 
    | <ASYNC> 'with' <,_with_item_+> ':' <block>
    | <ASYNC> 'with' <,_with_item_+> ':' <TYPE_COMMENT> <block>  ★

<,_with_item_+>:
    | <with_item> ',' <with_item>
    | <with_item> ★

<with_item>:
    | <expression> 'as' <star_target> ',' 
    | <expression> 'as' <star_target> ')'
    | <expression> 'as' <star_target> ':' 
    | <expression>   ★
<try_stmt>:
    | 'try' ':' <block> <finally_block>
    | 'try' ':' <block> <except_block_+>  
    | 'try' ':' <block> <except_block_+>  <finally_block>
    | 'try' ':' <block> <except_block_+> <else_block>  
    | 'try' ':' <block> <except_block_+> <else_block> <finally_block> 
    | 'try' ':' <block> <except_star_block_+> 
    | 'try' ':' <block> <except_star_block_+> <finally_block>
    | 'try' ':' <block> <except_star_block_+> <else_block> 
    | 'try' ':' <block> <except_star_block_+> <else_block> <finally_block>   ★
<except_block_+>:
    | <except_block_+> <except_block>
    | <except_block> ★
<except_star_block_+>:
    | <except_star_block_+> <except_star_block>
    | <except_star_block> ★

<except_block>:
    | 'except' <expression> ':' <block> 
    | 'except' <expression> 'as' <NAME> ':' <block> 
    | 'except' ':' <block>   ★
<except_star_block>:
    | 'except' '*' <expression> ':' <block>
    | 'except' '*' <expression> 'as' <NAME> ':' <block>  ★
<finally_block>:
    | 'finally' ':' <block>  ★
<match_stmt>:
    | "match" <subject_expr> ':' <NEWLINE> <INDENT> <case_block_+> <DEDENT>  ★
<case_block_+>:
    | <case_block_+> <case_block>
    | <case_block> ★
<subject_expr>:
    | <star_named_expression> ','  
    | <star_named_expression> ',' <star_named_expressions>
    | <named_expression>  ★
<case_block>:
    | "case" <patterns> ':' <block> 
    | "case" <patterns> <guard> ':' <block>  ★
<guard>:
    | 'if' <named_expression>   ★
<patterns>:
    | <open_sequence_pattern> 
    | <pattern>  ★
<pattern>:
    | <as_pattern>
    | <or_pattern>  ★
<as_pattern>:
    | <or_pattern> 'as' <pattern_capture_target>  ★
<or_pattern>:
    | <|_closed_pattern_+>  ★
<|_closed_pattern_+>:
    | <|_closed_pattern_+> '|' <closed_pattern>
    | <closed_pattern> ★
<closed_pattern>:
    | <literal_pattern>
    | <capture_pattern>
    | <wildcard_pattern>
    | <value_pattern>
    | <group_pattern>
    | <sequence_pattern>
    | <mapping_pattern>
    | <class_pattern>  ★
<literal_pattern>:
    | <signed_number> 
    | <complex_number> 
    | <strings> 
    | 'None' 
    | 'True' 
    | 'False'   ★
<literal_expr>:
    | <signed_number> 
    | <complex_number>
    | <strings>
    | 'None' 
    | 'True' 
    | 'False'   ★
<complex_number>:
    | <signed_real_number> '+' <imaginary_number> 
    | <signed_real_number> '-' <imaginary_number>   ★
<signed_number>:
    | <NUMBER>
    | '-' <NUMBER>   ★
<signed_real_number>:
    | <real_number>
    | '-' <real_number>   ★
<real_number>:
    | <NUMBER>   ★
<imaginary_number>:
    | <NUMBER>   ★
<capture_pattern>:
    | <pattern_capture_target>   ★
<pattern_capture_target>:
    | <NAME>  ★
<wildcard_pattern>:
    | "_"   ★
<value_pattern>:
    | <attr>    ★
<attr>:
    | <name_or_attr> '.' <NAME>   ★
<name_or_attr>:
    | <attr>
    | <NAME>  ★
<group_pattern>:
    | '(' <pattern> ')'  ★
<sequence_pattern>:
    | '[' ']'
    | '[' <maybe_sequence_pattern> ']' 
    | '(' ')'
    | '(' <open_sequence_pattern> ')'   ★
<open_sequence_pattern>:
    | <maybe_star_pattern> ',' 
    | <maybe_star_pattern> ',' <maybe_sequence_pattern>   ★
<maybe_sequence_pattern>:
    | <,_maybe_star_pattern_+>  
    | <,_maybe_star_pattern_+> ','  ★
<,_maybe_star_pattern_+>:
    | <,_maybe_star_pattern_+> ',' <maybe_star_pattern>
    | <maybe_star_pattern> ★

<maybe_star_pattern>:
    | <star_pattern>
    | <pattern>   ★
<star_pattern>:
    | '*' <pattern_capture_target> 
    | '*' <wildcard_pattern>   ★
<mapping_pattern>:
    | '{' '}' 
    | '{' <double_star_pattern> '}'
    | '{' <double_star_pattern> ',' '}' 
    | '{' <items_pattern> ',' <double_star_pattern> '}' 
    | '{' <items_pattern> ',' <double_star_pattern> ',' '}' 
    | '{' <items_pattern> '}'
    | '{' <items_pattern> ',' '}'   ★
<items_pattern>:
    | <,_key_value_pattern_+>  ★

<,_key_value_pattern_+>:
    | <,_key_value_pattern_+> <key_value_pattern>
    | <key_value_pattern> ★
<key_value_pattern>:
    | (<literal_expr> | <attr>) ':' <pattern>   ★
<double_star_pattern>:
    | '**' <pattern_capture_target>   ★
<class_pattern>:
    | <name_or_attr> '(' ')' 
    | <name_or_attr> '(' <positional_patterns> ')'
    | <name_or_attr> '(' <positional_patterns> ',' ')' 
    | <name_or_attr> '(' <keyword_patterns> ')'
    | <name_or_attr> '(' <keyword_patterns> ',' ')' 
    | <name_or_attr> '(' <positional_patterns> ',' <keyword_patterns> ')'  
    | <name_or_attr> '(' <positional_patterns> ',' <keyword_patterns> ',' ')'   ★
<positional_patterns>:
    | <,_pattern_+>  ★

<,_pattern_+>:
    | <,_pattern_+> ',' <pattern>
    | <pattern>  ★

<keyword_patterns>:
    | <,_keyword_pattern_+>  ★

<,_keyword_pattern_+>:
    | <,_keyword_pattern_+> ',' <keyword_pattern>
    | <keyword_pattern>  ★

<keyword_pattern>:
    | <NAME> '=' <pattern>   ★
<type_alias>:
    | "type" <NAME> '=' <expression>
    | "type" <NAME> <type_params> '=' <expression>  ★
<type_params>:
    | '[' <type_param_seq>  ']'   ★
<type_param_seq>: 
    | <,_type_param_+>  
    | <,_type_param_+> ','  ★

<,_type_param_+>:
    | <,_type_param_+> <type_param>
    | <type_param>  ★
 
<type_param>:
    | <NAME> 
    | <NAME> <type_param_bound> 
    | '*' <NAME> ':' <expression> 
    | '*' <NAME> 
    | '**' <NAME> ':' <expression> 
    | '**' <NAME>    ★
<type_param_bound>:
    | ':' <expression>   ★
<expressions>:  
    | <expression> <,expression_+>  
    | <expression> <,expression_+> ',' 
    | <expression> ',' 
    | <expression>  ★
<,expression_+>:
    | <,expression_+> ',' <expression>
    | ',' <expression>  ★
<expression>:
    | <disjunction> 'if' <disjunction> 'else' <expression> 
    | <disjunction>
    | <lambdef>  ★
<yield_expr>:
    | 'yield' 'from' <expression> 
    | 'yield' 
    | 'yield' <star_expressions>   ★
<star_expressions>:
    | <star_expression> <,star_expression> 
    | <star_expression> <,star_expression> ',' 
    | <star_expression> ',' 
    | <star_expression>  ★
<,star_expression>:
    | <,star_expression> ',' <star_expression>
    | ',' <star_expression>  ★
<star_expression>:
    | '*' <bitwise_or>   
    | <expression>  ★
<star_named_expressions>: 
    | <,_star_named_expression_+>
    | <,_star_named_expression_+> ','   ★
<,_star_named_expression_+>:
    | <,_star_named_expression_+> ',' <star_named_expression>
    | <star_named_expression>  ★

<star_named_expression>:
    | '*' <bitwise_or> 
    | <named_expression>  ★

<assignment_expression>:
    | <NAME> ':=' <expression>   ★
<named_expression>:
    | <assignment_expression>   
    | <expression>    ★
<disjunction>:
    | <conjunction> <or_conjunction_+> 
    | <conjunction>    ★
<or_conjunction_+>:
    | <or_conjunction_+> 'or' <conjunction>
    | <conjunction>  ★

<conjunction>:
    | <inversion> <and_inversion_+> 
    | <inversion>   ★
<and_inversion_+>:
    | <and_inversion_+> 'and' <inversion>
    | <inversion>  ★

<inversion>:
    | 'not' <inversion> 
    | <comparison>   ★
<comparison>:
    | <bitwise_or> <compare_op_bitwise_or_pair_+> 
    | <bitwise_or>    ★
<compare_op_bitwise_or_pair_+>:
    | <compare_op_bitwise_or_pair_+> <compare_op_bitwise_or_pair>
    | <compare_op_bitwise_or_pair>  ★

<compare_op_bitwise_or_pair>:
    | <eq_bitwise_or>
    | <noteq_bitwise_or>
    | <lte_bitwise_or>
    | <lt_bitwise_or>
    | <gte_bitwise_or>
    | <gt_bitwise_or>
    | <notin_bitwise_or>
    | <in_bitwise_or>
    | <isnot_bitwise_or>
    | <is_bitwise_or>  ★
<eq_bitwise_or>:
    | '==' <bitwise_or>    ★
<noteq_bitwise_or>:
    | '!=' <bitwise_or>  ★
<lte_bitwise_or>:
    | '<=' <bitwise_or> ★
<lt_bitwise_or>:
    | '<' <bitwise_or> ★
<gte_bitwise_or>:
    | '>=' <bitwise_or> ★
<gt_bitwise_or>:
    | '>' <bitwise_or> ★
<notin_bitwise_or>:
    | 'not' 'in' <bitwise_or> ★
<in_bitwise_or>:
    | 'in' <bitwise_or> ★
<isnot_bitwise_or>:
    | 'is' 'not' <bitwise_or> ★
<is_bitwise_or>:
    | 'is' <bitwise_or>   ★
<bitwise_or>:
    | <bitwise_or> '|' <bitwise_xor> 
    | <bitwise_xor>   ★
<bitwise_xor>: 
    | <bitwise_xor> '^' <bitwise_and> 
    | <bitwise_and>   ★
<bitwise_and>:
    | <bitwise_and> '&' <shift_expr> 
    | <shift_expr>   ★
<shift_expr>:
    | <shift_expr> '<<' <sum> 
    | <shift_expr> '>>' <sum> 
    | <sum>  ★
<sum>:
    | <sum> '+' <term> 
    | <sum> '-' <term> 
    | <term> ★
<term>:
    | <term> '*' <factor> 
    | <term> '/' <factor> 
    | <term> '//' <factor> 
    | <term> '%' <factor> 
    | <term> '@' <factor> 
    | <factor>  ★
<factor>:
    | '+' <factor> 
    | '-' <factor> 
    | '~' <factor> 
    | <power>  ★
<power>:
    | <await_primary> '**' <factor> 
    | <await_primary>  ★
<await_primary>:
    | <AWAIT> <primary> 
    | <primary>   ★
<primary>:
    | <primary> '.' <NAME> 
    | <primary> <genexp> 
    | <primary> '(' ')' 
    | <primary> '(' <arguments> ')' 
    | <primary> '[' <slices> ']' 
    | <atom>  ★
<slices>:
    | <slice> !',' 
    | <,_slice_starred_expression_+>    
    | <,_slice_starred_expression_+> ','   ★
<,_slice_starred_expression_+>:
    | <,_slice_starred_expression_+> ',' <slice> 
    | <,_slice_starred_expression_+> ',' <starred_expression>
    | <slice>
    | <starred_expression> ★

<slice>:
    | ':' 
    | ':' ':' [<expression>]
    | ':' <expression> 
    | ':' <expression> ':' 
    | ':' <expression> ':' <expression>
    | <expression> ':' 
    | <expression> ':' ':' [<expression>] 
    | <expression> ':' <expression> 
    | <expression> ':' <expression> ':' [<expression>] 
    | <named_expression>   ★
<atom>:
    | <NAME>
    | 'True' 
    | 'False' 
    | 'None' 
    | <strings>
    | <NUMBER>
    | <tuple>
    | <group>
    | <genexp>
    | <list>
    | <listcomp>
    | <dict>
    | <set>
    | <dictcomp>
    | <setcomp>
    | '...'   ★
<group>:
    | '(' <yield_expr> ')'  
    | '(' <named_expression> ')'   ★
<lambdef>:
    | 'lambda' ':' <expression>
    | 'lambda' <lambda_params> ':' <expression>   ★
<lambda_params>: 
    | <lambda_parameters>  ★
<lambda_parameters>:
    | <lambda_slash_no_default> <lambda_param_no_default_*> <lambda_param_with_default_*> 
    | <lambda_slash_no_default> <lambda_param_no_default_*> <lambda_param_with_default_*> <lambda_star_etc> 
    | <lambda_slash_with_default> <lambda_param_with_default_*> 
    | <lambda_slash_with_default> <lambda_param_with_default_*> <lambda_star_etc> 
    | <lambda_param_no_default_+> <lambda_param_with_default_*> 
    | <lambda_param_no_default_+> <lambda_param_with_default_*> <lambda_star_etc> 
    | <lambda_param_with_default_+> 
    | <lambda_param_with_default_+> <lambda_star_etc> 
    | <lambda_star_etc>   ★

<lambda_param_no_default_*>:
    | <lambda_param_no_default_*> <lambda_param_no_default>
    | <lambda_param_no_default>  ★
    |
<lambda_param_no_default_+>:
    | <lambda_param_no_default_+> <lambda_param_no_default>
    | <lambda_param_no_default>  ★

<lambda_param_with_default_*>:
    | <lambda_param_with_default_*> <lambda_param_with_default>
    | <lambda_param_with_default>  ★
    |
<lambda_param_with_default_+>:
    | <lambda_param_with_default_+> <lambda_param_with_default>
    | <lambda_param_with_default>  ★

<lambda_slash_no_default>:
    | <lambda_param_no_default_+> '/' ',' 
    | <lambda_param_no_default_+> '/' ':'  ★
<lambda_slash_with_default>:
    | <lambda_param_no_default_*> <lambda_param_with_default_+> '/' ',' 
    | <lambda_param_no_default_*> <lambda_param_with_default_+> '/' ':'  ★
1
<lambda_star_etc>:
    | '*' <lambda_param_no_default> <lambda_param_maybe_default_*> 
    | '*' <lambda_param_no_default> <lambda_param_maybe_default_*> <lambda_kwds>
    | '*' ',' <lambda_param_maybe_default_+> 
    | '*' ',' <lambda_param_maybe_default_+> <lambda_kwds> 
    | <lambda_kwds>   ★

<lambda_param_maybe_default_*>:
    | <lambda_param_maybe_default_*> <lambda_param_maybe_default>
    | <lambda_param_maybe_default>  
    | ★
<lambda_param_maybe_default_+>:
    | <lambda_param_maybe_default_+> <lambda_param_maybe_default>
    | <lambda_param_maybe_default>  ★

<lambda_kwds>:
    | '**' <lambda_param_no_default>  ★
<lambda_param_no_default>:
    | <lambda_param> ',' 
    | <lambda_param> ':'   ★
<lambda_param_with_default>:
    | <lambda_param default> ',' 
    | <lambda_param default> ':'   ★
<lambda_param_maybe_default>:
    | ','
    | <lambda_param default> ',' 
    | ':'   
    | <lambda_param default> ':'   ★
<lambda_param>:
    | <NAME>   ★
<fstring_middle>:
    | <fstring_replacement_field>
    | <FSTRING_MIDDLE>   ★
<fstring_replacement_field>:
    | '{' <yield_expr>  '}' 
    | '{' <yield_expr> <fstring_full_format_spec> '}' 
    | '{' <yield_expr> <fstring_conversion> '}'
    | '{' <yield_expr> <fstring_conversion> <fstring_full_format_spec> '}' 
    | '{' <yield_expr> '=' '}'
    | '{' <yield_expr> '=' <fstring_full_format_spec> '}'
    | '{' <yield_expr> '=' <fstring_conversion> '}' 
    | '{' <yield_expr> '=' <fstring_conversion> <fstring_full_format_spec> '}' 
    | '{' <star_expressions> '}'
    | '{' <star_expressions> <fstring_full_format_spec> '}'
    | '{' <star_expressions> <fstring_conversion> '}'
    | '{' <star_expressions> <fstring_conversion> <fstring_full_format_spec> '}'
    | '{' <star_expressions> '=' '}'
    | '{' <star_expressions> '=' <fstring_full_format_spec> '}'
    | '{' <star_expressions> '=' <fstring_conversion> '}' 
    | '{' <star_expressions> '=' <fstring_conversion> <fstring_full_format_spec> '}'  ★
<fstring_conversion>:
    | "!" <NAME>  ★
<fstring_full_format_spec>:
    | ':' <fstring_format_spec_*>  ★
<fstring_format_spec_*>:
    | <fstring_format_spec_*> <fstring_format_spec>
    | <fstring_format_spec>  
    | ★

<fstring_format_spec>:
    | <FSTRING_MIDDLE> 
    | <fstring_replacement_field>  ★
<fstring>:
    | <FSTRING_START> <fstring_middle_*> <FSTRING_END>  ★
<fstring_middle_*>:
    | <fstring_middle_*> <fstring_middle>
    | <fstring_middle>  
    | ★

<string>:
    | <STRING>   ★
<strings>:
    | <fstring_string_+>   ★
<fstring_string_+>:
    | <fstring_string_+> <fstring>
    | <fstring_string_+> <string>
    | <fstring>
    | <string>  ★

<list>:
    | '[' ']'
    | '[' <star_named_expressions> ']'   ★
<tuple>:
    | '(' ')'
    | '(' <star_named_expression> ',' ')'
    | '(' <star_named_expression> ',' <star_named_expressions> ')'  ★
<set>:
    | '{' <star_named_expressions> '}'   ★
<dict>:
    | '{' '}'
    | '{' <double_starred_kvpairs> '}'   ★
<double_starred_kvpairs>:
    |  <,_double_starred_kvpair_+> 
    |  <,_double_starred_kvpair_+> ','   ★
<,_double_starred_kvpair_+>:
    | <,_double_starred_kvpair_+> ',' <double_starred_kvpair>
    | <double_starred_kvpair>  ★
<double_starred_kvpair>:
    | '**' <bitwise_or> 
    | <kvpair>   ★
<kvpair>:
    | <expression> ':' <expression>   ★
<for_if_clauses>:
    | <for_if_clause_+>   ★
<for_if_clause_+>:
    | <for_if_clause_+> <for_if_clause>
    | <for_if_clause> ★
<for_if_clause>:
    | <ASYNC> 'for' <star_targets> 'in' <disjunction> <if_disjunction_*>
    | 'for' <star_targets> 'in' <disjunction> <if_disjunction_*>  ★
<if_disjunction_*>:
    | <if_disjunction_*> 'if' <disjunction>
    | 'if' <disjunction>  
    |  ★

<listcomp>:
    | '[' <named_expression> <for_if_clauses> ']'   ★
<setcomp>:
    | '{' <named_expression> <for_if_clauses> '}'   ★
<genexp>:
    | '(' <assignment_expression> <for_if_clauses> ')'  
    | '(' <expression> <for_if_clauses> ')'   ★
<dictcomp>:
    | '{' <kvpair> <for_if_clauses> '}'   ★
<arguments>:
    | <args> ')'
    | <args> ',' ')'    ★
<args>:
    | <,_starred_expression_assignment_expression_+> 
    | <,_starred_expression_assignment_expression_+> ',' <kwargs>   
    | <,_starred_expression_expression_+> 
    | <,_starred_expression_expression_+> ',' <kwargs>          
    | <kwargs>   ★
<,_starred_expression_assignment_expression_+>:
    | <,_starred_expression_assignment_expression_+> ',' <starred_expression>
    | <,_starred_expression_assignment_expression_+> ',' <assignment_expression>
    | <starred_expression>
    | <assignment_expression>  ★
<,_starred_expression_expression_+>:
    | <,_starred_expression_expression_+> ',' <starred_expression>
    | <,_starred_expression_expression_+> ',' <expression>
    | <starred_expression>
    | <expression>  ★

<kwargs>:
    | <,_kwarg_or_starred_+> ',' <,_kwarg_or_double_starred_+> 
    | <,_kwarg_or_starred_+>
    | <,_kwarg_or_double_starred_+>  ★
<,_kwarg_or_starred_+>:
    | <,_kwarg_or_starred_+> ',' <kwarg_or_starred>
    | <kwarg_or_starred>  ★
<,_kwarg_or_double_starred_+>:
    | <,_kwarg_or_double_starred_+> ',' <kwarg_or_double_starred>
    | <kwarg_or_double_starred>  ★

<starred_expression>:
    | '*' <expression>   ★
<kwarg_or_starred>:
    | <NAME> '=' <expression>   
    | <starred_expression>  ★
<kwarg_or_double_starred>:
    | <NAME> '=' <expression> 
    | '**' <expression>   ★
<star_targets>:
    | <star_target>  
    | <star_target> <,star_target_*>
    | <star_target> <,star_target_*> ','   ★
<,star_target_*>:
    | <,star_target_*> ',' <star_target>
    | ',' <star_target>
    |  ★
<star_targets_list_seq>: 
    | <,_star_target_+> 
    | <,_star_target_+> ','   ★
<,_star_target_+>:
    | <,_star_target_+> ',' <star_target>
    | <star_target> ★

<star_targets_tuple_seq>:
    | <star_target> <,star_target_+> 
    | <star_target> <,star_target_+> ',' 
    | <star_target> ','   ★
<,star_target_+>:
    | <,star_target_+> ',' <star_target>
    | ',' <star_target> ★

<star_target>:
    | '*' <star_target> 
    | <target_with_star_atom>  ★
<target_with_star_atom>:
    | <t_primary> '.' <NAME> 
    | <t_primary> '[' <slices> ']' 
    | <star_atom>  ★
<star_atom>:
    | <NAME> 
    | '(' <target_with_star_atom> ')' 
    | '(' ')' 
    | '(' <star_targets_tuple_seq> ')' 
    | '[' ']'
    | '[' <star_targets_list_seq> ']'   ★
<single_target>:
    | <single_subscript_attribute_target>
    | <NAME>
    | '(' <single_target> ')'   ★
<single_subscript_attribute_target>:
    | <t_primary> '.' <NAME> 
    | <t_primary> '[' <slices> ']' ★
<t_primary>:
    | <t_primary> '.' <NAME> <t_lookahead> 
    | <t_primary> '[' <slices> ']' <t_lookahead> 
    | <t_primary> <genexp> <t_lookahead> 
    | <t_primary> '(' ')' <t_lookahead> 
    | <t_primary> '(' <arguments> ')' <t_lookahead> 
    | <atom> <t_lookahead>   ★
<t_lookahead>: 
    | '(' 
    | '[' 
    | '.' ★
<del_targets>:
    | <,_del_target_+>   
    | <,_del_target_+> ','  ★
<,_del_target_+>:
    | <,_del_target_+> ',' <del_target>
    | <del_target>  ★

<del_target>:
    | <t_primary> '.' <NAME> 
    | <t_primary> '[' <slices> ']' 
    | <del_t_atom>  ★
<del_t_atom>:
    | <NAME> 
    | '(' <del_target> ')' 
    | '(' ')' 
    | '(' <del_targets> ')' 
    | '[' ']'
    | '[' <del_targets> ']'   ★
<type_expressions>:
    | <,_expression_+> ',' '*' <expression> ',' '**' <expression> 
    | <,_expression_+> ',' '*' <expression> 
    | <,_expression_+> ',' '**' <expression> 
    | '*' <expression> ',' '**' <expression> 
    | '*' <expression> 
    | '**' <expression> 
    | <,_expression_+>   ★
<,_expression_+>:
    | <,_expression_+> ',' <expression>
    | <expression>  ★

<func_type_comment>:
    | <NEWLINE> <TYPE_COMMENT> <NEWLINE> <INDENT>
    | <TYPE_COMMENT>  ★