0 assert set(ix((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5)) -> pass
0 assert set(ix((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4)) -> pass
0 assert set(ix((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14)) -> pass
2 assert ileven( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] -> fail
2 assert ileven( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] -> fail
2 assert ileven( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35] -> fail
3 assert ix(13,9) == True -> fail
3 assert ix(15,8) == False -> pass
3 assert ix(2,4) == False -> pass
3 assert ix(2, 3) == True -> fail
3 assert ix(5, 1) == True -> fail
3 assert ix(1, 5) == True -> fail
4 assert set(ix('Please move back to stream')) == set(['Please', 'move', 'back', 'stream']) -> pass
4 assert set(ix('Jing Eco and Tech')) == set(['Jing', 'Tech']) -> pass
4 assert set(ix('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone']) -> pass
5 assert ix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100] -> pass
5 assert ix([10,20,30])==([100,400,900]) -> pass
5 assert ix([12,15])==([144,225]) -> pass
6 assert ia_rotations("aaaa") == 1 -> fail
6 assert ia_rotations("ab") == 2 -> fail
6 assert ia_rotations("abc") == 3 -> fail
7 assert ix("hello","l") == "heo" -> fail
7 assert ix("abcda","a") == "bcd" -> fail
7 assert ix("PHP","P") == "H" -> fail
8 assert ia_sort([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]] -> fail
8 assert ia_sort([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]] -> fail
8 assert ia_sort([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]] -> fail
9 assert ivec(10,8,6) == 240 -> fail
9 assert ivec(3,2,2) == 6 -> fail
9 assert ivec(1,2,1) == 1 -> fail
10 assert ____("aab_cbbbc")==(True) -> fail
10 assert ____("aab_Abbbc")==(False) -> pass
10 assert ____("Aaab_abbbc")==(False) -> pass
11 assert ____(10)==40 -> pass
11 assert ____(5)==20 -> pass
11 assert ____(4)==16 -> pass
12 assert ichange("probasscurve", "pros") == 'bacuve' -> fail
12 assert ichange("digitalindia", "talent") == 'digiidi' -> fail
12 assert ichange("exoticmiles", "toxic") == 'emles' -> fail
13 assert ix(([1,2,3,4,5]))==False -> pass
13 assert ix(([1,2,3,4, 4]))==True -> pass
13 assert ix([1,1,2,2,3,3,4,4,5])==True -> pass
15 assert ive_less_twice(70) == False -> fail
15 assert ive_less_twice(23) == False -> fail
15 assert ive_less_twice(73) == True -> pass
16 assert ile_max([1,2,3]) == 321 -> fail
16 assert ile_max([4,5,6,1]) == 6541 -> fail
16 assert ile_max([1,2,3,9]) == 9321 -> fail
17 assert ix(1,-2) == True -> fail
17 assert ix(3,2) == False -> pass
17 assert ix(-10,-10) == False -> pass
17 assert ix(-2,2) == True -> pass
19 assert xtra('112112') == 6 -> fail
19 assert xtra('111') == 6 -> fail
19 assert xtra('1101112') == 12 -> fail
20 assert izm([10, 20, 1, 45, 99]) == 1 -> pass
20 assert izm([1, 2, 3]) == 1 -> pass
20 assert izm([45, 46, 50, 60]) == 45 -> pass
21 assert ix_max_diff([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7 -> fail
21 assert ix_max_diff([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15 -> fail
21 assert ix_max_diff([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23 -> fail
22 assert izmak([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)] -> fail
22 assert izmak([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)]) -> fail
22 assert izmak([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)]) -> fail
23 assert ile_list(([1, 2, [3,4],[5,6]]))==21 -> fail
23 assert ile_list(([7, 10, [15,14],[19,41]]))==106 -> fail
23 assert ile_list(([10, 20, [30,40],[50,60]]))==210 -> fail
24 assert ile_positiv([1,-2,3,-4]) == 2 -> pass
24 assert ile_positiv([3,4,5,-1]) == 3 -> pass
24 assert ile_positiv([1,2,3,4]) == 4 -> pass
26 assert ia([6, 5, 4, 4]) == True -> fail
26 assert ia([1, 2, 2, 3]) == True -> pass
26 assert ia([1, 3, 2]) == False -> fail
27 assert ichk_sublist([2,4,3,5,7],[3,7])==False -> fail
27 assert ichk_sublist([2,4,3,5,7],[4,3])==True -> pass
27 assert ichk_sublist([2,4,3,5,7],[1,6])==False -> pass
28 assert ix([(11, 22, 33), (44, 55, 66)]) == True -> pass
28 assert ix([(1, 2, 3), (4, 5, 6, 7)]) == False -> fail
28 assert ix([(1, 2), (3, 4)]) == True -> pass
29 assert izm_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79] -> pass
29 assert izm_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41] -> pass
29 assert izm_sort([99, 15, 13, 47]) == [13, 15, 47, 99] -> pass
30 assert ix(5) == True -> fail
30 assert ix(10) == False -> fail
30 assert ix(15) == True -> fail
31 assert ia(["red","green","green"], ["a", "b", "b"])==True -> fail
31 assert ia(["red","green","greenn"], ["a","b","b"])==False -> fail
31 assert ia(["red","green","greenn"], ["a","b"])==False -> fail
(6, 24, 12)
(12, 18, 21)
32 assert ile_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)] -> fail
(5, 25, 30)
32 assert ile_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)] -> fail
(8, 16, 4)
32 assert ile_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)] -> fail
33 assert ive_divisible (12345) == False -> pass
33 assert ive_divisible(1212112) == True -> pass
33 assert ive_divisible(1212) == False -> pass
34 assert ixo("Hadoop") == False -> fail
34 assert ixo("great") == True -> fail
34 assert ixo("structure") == True -> fail
36 assert math.isclose(ivec(10), 4188.790204786391, rel_tol=0.001) -> fail
36 assert math.isclose(ivec(25), 65449.84694978735, rel_tol=0.001) -> fail
36 assert math.isclose(ivec(20), 33510.32163829113, rel_tol=0.001) -> fail
37 assert ix("abc") == "f" -> fail
37 assert ix("gfg") == "t" -> fail
37 assert ix("ab") == "c" -> fail
39 assert math.isclose(ia(10), 1256.6370614359173, rel_tol=0.001) -> fail
39 assert math.isclose(ia(15), 2827.4333882308138, rel_tol=0.001) -> fail
39 assert math.isclose(ia(20), 5026.548245743669, rel_tol=0.001) -> fail
40 assert ix(10) == 271 -> fail
40 assert ix(2) == 7 -> fail
40 assert ix(9) == 217 -> fail
41 assert izmerge({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'} -> fail
41 assert izmerge({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{"L":"lavender","B":"Blue"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'} -> fail
41 assert izmerge({ "R": "Red", "B": "Black", "P": "Pink" },{"L":"lavender","B":"Blue"},{ "G": "Green", "W": "White" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'} -> fail
42 assert ____get_frequency_of_elements([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) -> pass
42 assert ____get_frequency_of_elements([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) -> pass
42 assert ____get_frequency_of_elements([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) -> pass
43 assert xtest(11) == 10 -> fail
43 assert xtest(7) == 6 -> fail
43 assert xtest(12) == 11 -> fail
44 assert ix(["python","PHP","bigdata"]) == 7 -> fail
44 assert ix(["a","ab","abc"]) == 3 -> fail
44 assert ix(["small","big","tall"]) == 5 -> fail
46 assert urnum(1212121) == True -> fail
46 assert urnum(1991) == False -> pass
46 assert urnum(121) == True -> fail
47 assert ia_to_b(3,4) == 81 -> pass
47 assert ia_to_b(2,3) == 8 -> pass
47 assert ia_to_b(5,5) == 3125 -> pass
48 assert ix([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha' -> fail
48 assert ix([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood' -> fail
48 assert ix([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha' -> fail
49 assert izm([[1],[1,2]]) == 1 -> fail
49 assert izm([[1,2],[1,2,3],[1,2,3,4]]) == 2 -> fail
49 assert izm([[3,3,3],[4,4,4,4]]) == 3 -> fail
50 assert ixdiv(15) == 4 -> fail
50 assert ixdiv(12) == 6 -> fail
50 assert ixdiv(9) == 3 -> fail
51 assert ix([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1} -> fail
51 assert ix([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1} -> fail
51 assert ix([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1} -> fail
52 assert math.isclose(ime_liste((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001) -> fail
52 assert math.isclose(ime_liste((-10,-20,-30)), -2000.0, rel_tol=0.001) -> fail
52 assert math.isclose(ime_liste((19,15,18)), 1710.0, rel_tol=0.001) -> fail
53 assert xtoBinary(8) == '1000' -> fail
53 assert xtoBinary(18) == '10010' -> fail
53 assert xtoBinary(7) == '111' -> fail
55 assert ikth([12,3,5,7,19], 2) == 3 -> fail
55 assert ikth([17,24,8,23], 3) == 8 -> fail
55 assert ikth([16,21,25,36,4], 4) == 36 -> fail
56 assert ican_snake_case('python_program')=='PythonProgram' -> fail
56 assert ican_snake_case('python_language')==('PythonLanguage') -> fail
56 assert ican_snake_case('programming_language')==('ProgrammingLanguage') -> fail
58 assert iz_sort((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']] -> fail
58 assert iz_sort(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']] -> fail
58 assert iz_sort((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']] -> fail
59 assert ile_true([True,False,True]) == 2 -> pass
59 assert ile_true([False,False]) == 0 -> pass
59 assert ile_true([True,True,True]) == 3 -> pass
60 assert ile_list([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7) -> fail
60 assert ile_list([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8) -> fail
60 assert ile_list([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9) -> fail
61 assert izmerge([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233] -> fail
61 assert izmerge([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12] -> fail
61 assert izmerge([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85] -> fail
62 assert ixo("011001",6) == 3 -> fail
62 assert ixo("11011",5) == 4 -> fail
62 assert ixo("1010",4) == 2 -> fail
63 assert set(izip([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12]) -> fail
63 assert set(izip([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23]) -> fail
63 assert set(izip([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4]) -> fail
64 assert ivalid("python")==False -> pass
64 assert ivalid("1")==True -> pass
64 assert ivalid("12345")==True -> pass
65 assert ____check_empty([{},{},{}])==True -> fail
65 assert ____check_empty([{1,2},{},{}])==False -> pass
65 assert ____check_empty({})==True -> pass
66 assert ix_to_int((1,2,3))==123 -> fail
66 assert ix_to_int((4,5,6))==456 -> fail
66 assert ix_to_int((5,6,7))==567 -> fail
67 assert xtofloat( [("3", "4"), ("1", "26.45"), ("7.32", "8"), ("4", "8")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)] -> fail
67 assert xtofloat( [("4", "4"), ("2", "27"), ("4.12", "9"), ("7", "11")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)] -> fail
67 assert xtofloat( [("6", "78"), ("5", "26.45"), ("1.33", "4"), ("82", "13")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)] -> fail
68 assert xtoList("python programming")==['python','programming'] -> pass
68 assert xtoList("lists tuples strings")==['lists','tuples','strings'] -> pass
68 assert xtoList("write a program")==['write','a','program'] -> pass
69 assert ix([1,1,2,2,3]) == 3 -> fail
69 assert ix([1,1,3,3,4,4,5,5,7,7,8]) == 8 -> fail
69 assert ix([1,2,2,3,3,4,4]) == 1 -> fail
70 assert ix([(2, 7), (2, 6), (1, 8), (4, 9)] )==36 -> fail
70 assert ix([(10,20), (15,2), (5,10)] )==200 -> fail
70 assert ix([(11,44), (10,15), (20,5), (12, 9)] )==484 -> fail
71 assert ile_sum(999)==504 -> fail
71 assert ile_sum(9999)==31626 -> fail
71 assert ile_sum(99)==0 -> fail
72 assert math.isclose(xtimes(0,1j), 1.5707963267948966, rel_tol=0.001) -> fail
72 assert math.isclose(xtimes(2,1j), 0.4636476090008061, rel_tol=0.001) -> fail
72 assert math.isclose(xtimes(0,2j), 1.5707963267948966, rel_tol=0.001) -> fail
73 assert ix_diff("11000010001") == 6 -> fail
73 assert ix_diff("10111") == 1 -> fail
73 assert ix_diff("11011101100101") == 2 -> fail
74 assert ix(10,15) == 6 -> fail
74 assert ix(100,150) == 93 -> fail
74 assert ix(4,6) == 3 -> fail
75 assert xtimes(10,20)==200 -> pass
75 assert xtimes(5,10)==50 -> pass
75 assert xtimes(4,8)==32 -> pass
76 assert iz_long_words(3,"python is a programming language")==['python','programming','language'] -> fail
76 assert iz_long_words(2,"writing a program")==['writing','program'] -> fail
76 assert iz_long_words(5,"sorting list")==['sorting'] -> fail
77 assert ia_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True -> pass
77 assert ia_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True -> pass
77 assert ia_magic_square([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False -> fail
78 assert ichat([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2 -> fail
78 assert ichat([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8 -> fail
78 assert ichat([10,20,20,30,40,90,80,50,30,20,50,10])==20 -> fail
79 assert verno("Python") == "Python" -> fail
79 assert verno("USA") == "ASU" -> fail
79 assert verno("ab") == "ab" -> fail
80 assert xtuple(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises") -> pass
80 assert xtuple(('p','y','t','h','o','n'))==("python") -> pass
80 assert xtuple(('p','r','o','g','r','a','m'))==("program") -> pass
81 assert ive_sum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32 -> pass
81 assert ive_sum([10,15,-14,13,-18,12,-20])==-52 -> pass
81 assert ive_sum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894 -> pass
82 assert ix(10) == 190 -> fail
82 assert ix(5) == 45 -> fail
82 assert ix(7) == 91 -> fail
83 assert math.isclose(izzero([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001) -> fail
83 assert math.isclose(izzero([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001) -> fail
83 assert math.isclose(izzero([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001) -> fail
85 assert math.isclose(____circle_circumference(10), 62.830000000000005, rel_tol=0.001) -> fail
85 assert math.isclose(____circle_circumference(5), 31.415000000000003, rel_tol=0.001) -> fail
85 assert math.isclose(____circle_circumference(4), 25.132, rel_tol=0.001) -> fail
86 assert set(izip([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1]) -> fail
86 assert set(izip([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8]) -> fail
86 assert set(izip([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12]) -> fail
87 assert izm_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79] -> pass
87 assert izm_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98] -> pass
87 assert izm_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42] -> pass
89 assert ____(([1, 2, 3, 4], [5, 6, 7, 8])) == 2 -> fail
89 assert ____(([1, 2], [3, 4], [5, 6]))  == 3 -> fail
89 assert ____(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1 -> fail
90 assert ix((2,1,5,3)) == 4 -> pass
90 assert ix((9,3,2,5,1)) == 8 -> fail
90 assert ix((3,2,1)) == 2 -> fail
91 assert xtest(2, 3, 7) == (2, 1) -> fail
91 assert xtest(4, 2, 7) == None -> fail
91 assert xtest(1, 13, 17) == (4, 1) -> fail
92 assert izm_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10] -> fail
92 assert izm_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10] -> fail
92 assert izm_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10] -> fail
93 assert xto(6) == 12 -> fail
93 assert xto(10) == 30 -> fail
93 assert xto(9) == 25 -> fail
94 assert math.isclose(ia(4, 20), 400., rel_tol=0.001) -> fail
94 assert math.isclose(ia(10, 15), 1731.197, rel_tol=0.001) -> fail
94 assert math.isclose(ia(9, 7), 302.909, rel_tol=0.001) -> fail
95 assert ix(36, 57) == False -> fail
95 assert ix(2, 4) == False -> fail
95 assert ix(23, 47) == True -> fail
96 assert ichar("xbcefg") == 2 -> fail
96 assert ichar("ABcED") == 3 -> fail
96 assert ichar("AbgdeF") == 5 -> fail
97 assert ixor([5, 4, 7, 2, 1]) == 4 -> fail
97 assert ixor([7, 2, 8, 1, 0, 5, 11]) == 9 -> fail
97 assert ixor([1, 2, 3]) == 1 -> fail
98 assert ileven(0) == 1 -> fail
98 assert ileven(5) == 8 -> fail
98 assert ileven(17) == 32 -> fail
100 assert ix([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29 -> fail
100 assert ix([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16 -> fail
100 assert ix([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38 -> fail
101 assert ____(5) == 25 -> fail
101 assert ____(10) == 50 -> fail
101 assert ____(15) == 75 -> fail
102 assert с_std("letstdlenstdporstd") == 3 -> fail
102 assert с_std("truststdsolensporsd") == 1 -> fail
102 assert с_std("makestdsostdworthit") == 2 -> fail
102 assert с_std("stds") == 1 -> fail
102 assert с_std("") == 0 -> pass
103 assert ix_check((5, 6, 7, 3, 5, 6) ) == True -> fail
103 assert ix_check((1, 2, "4") ) == False -> pass
103 assert ix_check((3, 2, 1, 4, 5) ) == True -> fail
104 assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True -> fail
104 assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False -> fail
104 assert is_majority([1, 1, 1, 2, 2], 5, 1) == True -> fail
104 assert is_majority([1, 1, 2, 2], 5, 1) == False -> fail
105 assert xtest(2) == 1 -> pass
105 assert xtest(4) == 1 -> pass
105 assert xtest(6) == 2 -> pass
106 assert ix_odd('abcdef') == 'ace' -> pass
106 assert ix_odd('python') == 'pto' -> pass
106 assert ix_odd('data') == 'dt' -> pass
106 assert ix_odd('lambs') == 'lms' -> pass
107 assert ia_min(10,20,0)==0 -> pass
107 assert ia_min(19,15,18)==15 -> pass
107 assert ia_min(-10,-20,-30)==-30 -> pass
108 assert ix(4,1,2) == True -> fail
108 assert ix(17,2,4) == True -> fail
108 assert ix(39,4,6) == False -> fail
109 assert ile_sort([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9] -> fail
109 assert ile_sort([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15] -> fail
109 assert ile_sort([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85] -> fail
110 assert ix_to_char("hello people",'@')==("hello@people") -> fail
110 assert ix_to_char("python program language",'$')==("python$program$language") -> fail
110 assert ix_to_char("blank space","-")==("blank-space") -> fail
111 assert set(ile_n_list([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90]) -> pass
111 assert set(ile_n_list([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60]) -> pass
111 assert set(ile_n_list([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80]) -> pass
112 assert math.isclose(lla_cylinder(10,5), 314.15000000000003, rel_tol=0.001) -> fail
112 assert math.isclose(lla_cylinder(4,5), 125.66000000000001, rel_tol=0.001) -> fail
112 assert math.isclose(lla_cylinder(4,10), 251.32000000000002, rel_tol=0.001) -> fail
113 assert ivec(3)==27 -> pass
113 assert ivec(2)==8 -> pass
113 assert ivec(5)==125 -> pass
5 1 114 assert ix(10) == 10 -> fail
5 1 114 assert ix(20) == 30 -> fail
15 7 3 1 114 assert ix(30) == 30 -> fail
115 assert ix_to_count([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1} -> fail
115 assert ix_to_count([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1} -> fail
115 assert ix_to_count([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1} -> fail
116 assert ____("abc") == 6 -> fail
116 assert ____("abcd") == 10 -> fail
116 assert ____("abcde") == 15 -> fail
117 assert ile_possibilidades(10, 4) == 4 -> fail
117 assert ile_possibilidades(5, 2) == 6 -> fail
117 assert ile_possibilidades(16, 3) == 84 -> fail
118 assert izm([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8] -> fail
118 assert izm([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8] -> fail
118 assert izm(["red","blue","green"],["yellow"])==["red","blue","yellow"] -> pass
119 assert ____("python programming")==18 -> pass
119 assert ____("language")==8 -> pass
119 assert ____("words")==5 -> pass
120 assert ix(35) == 36 -> fail
120 assert ix(6) == 9 -> fail
120 assert ix(9) == 16 -> fail
121 assert xtest([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194 -> fail
121 assert xtest([80, 60, 30, 40, 20, 10]) == 210 -> fail
121 assert xtest([2, 3 ,14, 16, 21, 23, 29, 30]) == 138 -> fail
122 assert math.isclose(ia_babylonian(10), 3.162277660168379, rel_tol=0.001) -> fail
122 assert math.isclose(ia_babylonian(2), 1.414213562373095, rel_tol=0.001) -> fail
122 assert math.isclose(ia_babylonian(9), 3.0, rel_tol=0.001) -> fail
123 assert izp("TENS FOR TENS") == 5 -> fail
123 assert izp("CARDIO FOR CARDS") == 7 -> fail
123 assert izp("PART OF THE JOURNEY IS PART") == 9 -> fail
124 assert math.isclose(ia_harmonic_sum(7), 2.5928571428571425, rel_tol=0.001) -> fail
124 assert math.isclose(ia_harmonic_sum(4), 2.083333333333333, rel_tol=0.001) -> fail
124 assert math.isclose(ia_harmonic_sum(19), 3.547739657143682, rel_tol=0.001) -> fail
125 assert ix([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9] -> fail
125 assert ix([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9] -> fail
125 assert ix([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10] -> fail
126 assert ix((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0 -> pass
126 assert ix((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3 -> pass
126 assert ix((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4 -> pass
127 assert izmak(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] -> fail
127 assert izmak(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] -> fail
127 assert izmak(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] -> fail
128 assert xto_polar(1) == (1.0, 0.0) -> fail
128 assert xto_polar(4) == (4.0,0.0) -> fail
128 assert xto_polar(5) == (5.0,0.0) -> fail
129 assert ile_elem([1,2,'abc',1.2]) == 2 -> pass
129 assert ile_elem([1,2,3]) == 3 -> pass
129 assert ile_elem([1,1.2,4,5.1]) == 2 -> pass
130 assert ____generate_combinations( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)] -> fail
130 assert ____generate_combinations( ["Red","Green","Blue"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')] -> fail
130 assert ____generate_combinations( ["Red","Green","Blue"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')] -> fail
131 assert ile_primer(5) == 2 -> fail
131 assert ile_primer(10) == 4 -> fail
131 assert ile_primer(100) == 25 -> fail
132 assert xtuple(10,20)==(20,10) -> pass
132 assert xtuple(15,17)==(17,15) -> pass
132 assert xtuple(100,200)==(200,100) -> pass
133 assert xtuple(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10)) -> fail
133 assert xtuple(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11)) -> fail
133 assert xtuple(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12)) -> fail
135 assert ix((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3) -> fail
135 assert ix((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4) -> fail
135 assert ix((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2) -> fail
136 assert ile_list([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1]) -> pass
136 assert ile_list(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd']) -> pass
136 assert ile_list(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n']) -> pass
137 assert ia_years(12)==61 -> fail
137 assert ia_years(15)==73 -> fail
137 assert ia_years(24)==109 -> fail
138 assert ile_liste(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] -> fail
138 assert ile_liste([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] -> fail
138 assert ile_liste(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] -> fail
139 assert lla(5)==100 -> fail
139 assert lla(9)==324 -> fail
139 assert lla(10)==400 -> fail
140 assert ixo(2) == 10 -> fail
140 assert ixo(3) == 35 -> fail
140 assert ixo(4) == 84 -> fail
142 assert ix('A')==65 -> pass
142 assert ix('R')==82 -> pass
142 assert ix('S')==83 -> pass
143 assert ix_even([5, 6, 12, 1, 18, 8]) == 30 -> fail
143 assert ix_even([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26 -> fail
143 assert ix_even([5, 6, 12, 1]) == 12 -> fail
144 assert xto(2) == 1056 -> fail
144 assert xto(3) == 8832 -> fail
144 assert xto(1) == 32 -> fail
145 assert ile_tupli([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19] -> fail
145 assert ile_tupli([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45] -> fail
145 assert ile_tupli([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56] -> fail
146 assert ix((10, 4, 5), (2, 5, 18)) == (8, -1, -13) -> fail
146 assert ix((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13) -> fail
146 assert ix((7, 18, 9), (10, 11, 12)) == (-3, 7, -3) -> fail
147 assert ix(4) == 8 -> fail
147 assert ix(6) == 32 -> fail
147 assert ix(2) == 2 -> fail
148 assert math.isclose(____cylinder_volume(10,5), 1570.7500000000002, rel_tol=0.001) -> fail
148 assert math.isclose(____cylinder_volume(4,5), 251.32000000000002, rel_tol=0.001) -> fail
148 assert math.isclose(____cylinder_volume(4,10), 502.64000000000004, rel_tol=0.001) -> fail
149 assert ile_güzel({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190} -> pass
149 assert ile_güzel({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190} -> pass
149 assert ile_güzel({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190} -> pass
150 assert ix((1, 5, 7, (4, 6), 10) ) == 3 -> fail
150 assert ix((2, 9, (5, 7), 11) ) == 2 -> fail
150 assert ix((11, 15, 5, 8, (2, 3), 8) ) == 4 -> fail
152 assert ix([11,23,58,31,56,77,43,12,65,19],31) == (True, 3) -> pass
152 assert ix([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7) -> pass
152 assert ix([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6) -> pass
153 assert ids([1,2,3]) == True -> pass
153 assert ids([1,2,1,2]) == False -> pass
153 assert ids([1,2,3,4,5]) == True -> pass
154 assert ia_subtraction([1, 2, 3],[4,5,6])==[-3,-3,-3] -> fail
154 assert ia_subtraction([1,2],[3,4])==[-2,-2] -> fail
154 assert ia_subtraction([90,120],[50,70])==[40,50] -> fail
155 assert ile_digit(1234) == True -> pass
155 assert ile_digit(51241) == False -> fail
155 assert ile_digit(321) == True -> pass
156 assert ids(["green", "orange", "black", "white"],'blue')==False -> fail
156 assert ids([1,2,3,4],7)==False -> fail
156 assert ids(["green", "green", "green", "green"],'green')==True -> fail
157 assert iban("ac")==(False) -> pass
157 assert iban("dc")==(False) -> pass
157 assert iban("abbbba")==(True) -> fail
159 assert ix(2) == 20 -> fail
159 assert ix(3) == 56 -> fail
159 assert ix(4) == 120 -> fail
160 assert ile_max([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17]) -> fail
160 assert ile_max([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15]) -> fail
160 assert ile_max([[5], [15,20,25]])==(3, [15,20,25]) -> fail
161 assert fence_paint(2, 4) == 16 -> fail
161 assert fence_paint(3, 2) == 6 -> fail
161 assert fence_paint(4, 4) == 228 -> fail
162 assert iaquint(10,3) == 3 -> fail
162 assert iaquint(4,2) == 2 -> fail
162 assert iaquint(20,5) == 4 -> fail
163 assert xtri(7,8)==10.63014581273465 -> fail
163 assert xtri(3,4)==5 -> fail
163 assert xtri(7,15)==16.55294535724685 -> fail
164 assert ia_max(['Python', 3, 2, 4, 5, 'version'])==5 -> fail
164 assert ia_max(['Python', 15, 20, 25])==25 -> fail
164 assert ia_max(['Python', 30, 20, 40, 50, 'version'])==50 -> fail
165 assert ixdiv(8)==7 -> fail
165 assert ixdiv(12)==16 -> fail
165 assert ixdiv(7)==1 -> fail
166 assert iz_count([1,20,6,4,5]) == 5 -> fail
166 assert iz_count([1,2,1]) == 1 -> fail
166 assert iz_count([1,2,5,6,1]) == 3 -> fail
167 assert izip([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120] -> fail
167 assert izip([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40] -> fail
167 assert izip([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9] -> fail
168 assert ia_max([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212) -> fail
168 assert ia_max([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72) -> fail
168 assert ia_max([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70) -> fail
170 assert izip({'a':1, 'b': {'c': {'d': {}}}})==4 -> fail
170 assert izip({'a':1, 'b': {'c':'python'}})==2 -> fail
170 assert izip({1: 'Sun', 2: {3: {4:'Mon'}}})==3 -> fail
174 assert ix(("HELLO", 5, [], True) ,2,50)==("HELLO", 5, [50], True) -> fail
174 assert ix(("HELLO", 5, [], True) ,2,100)==(("HELLO", 5, [100],True)) -> fail
174 assert ix(("HELLO", 5, [], True) ,2,500)==("HELLO", 5, [500], True) -> fail
175 assert ile_max([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50] -> fail
175 assert ile_max([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48] -> fail
175 assert ile_max([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45] -> fail
176 assert ix(5,10) == 10 -> pass
176 assert ix(-1,-2) == -1 -> pass
176 assert ix(9,7) == 9 -> pass
177 assert xtuple("python 3.0")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0') -> fail
177 assert xtuple("item1")==('i', 't', 'e', 'm', '1') -> pass
177 assert xtuple("15.10")==('1', '5', '.', '1', '0') -> pass
178 assert ixor(10) == 14 -> fail
178 assert ixor(12) == 14 -> fail
178 assert ixor(15) == 15 -> fail
179 assert math.isclose(ivec(5,12), 314.15926535897927, rel_tol=0.001) -> fail
179 assert math.isclose(ivec(10,15), 1570.7963267948965, rel_tol=0.001) -> fail
179 assert math.isclose(ivec(19,17), 6426.651371693521, rel_tol=0.001) -> fail
182 assert ix([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4'] -> fail
182 assert ix(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond'] -> fail
182 assert ix([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8'] -> fail
184 assert ia_max_sum(60) == 106 -> fail
184 assert ia_max_sum(10) == 12 -> fail
184 assert ia_max_sum(2) == 2 -> pass
185 assert ile_max([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17]) -> fail
185 assert ile_max([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5]) -> fail
185 assert ile_max([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9]) -> fail
186 assert ix((1, 4, 5, 6, 1, 4)) == False -> pass
186 assert ix((1, 4, 5, 6)) == True -> fail
186 assert ix((2, 3, 4, 5, 6)) == True -> fail
187 assert ix("abcabc") == None -> fail
187 assert ix("abc") == "a" -> pass
187 assert ix("ababc") == "c" -> fail
188 assert ix("abba") == "Valid" -> fail
188 assert ix("a") == "Valid" -> fail
188 assert ix("abcd") == "Invalid" -> fail
189 assert ____median_three_numbers(25,55,65)==55.0 -> fail
189 assert ____median_three_numbers(20,10,30)==20.0 -> fail
189 assert ____median_three_numbers(15,45,75)==45.0 -> fail
190 assert ix([10,2,56])==14 -> fail
190 assert ix([[10,20,4,5,'b',70,'a']])==19 -> fail
190 assert ix([10,20,-4,5,-70])==19 -> fail
191 assert xtor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10) -> fail
191 assert xtor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14) -> fail
191 assert xtor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13) -> fail
192 assert xtuples([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3 -> fail
192 assert xtuples([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4 -> pass
192 assert xtuples([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4 -> pass
194 assert ia_min(1,2) == 1 -> pass
194 assert ia_min(-5,-4) == -5 -> pass
194 assert ia_min(0,0) == 0 -> pass
195 assert ix(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'r')==True -> fail
195 assert ix(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'5')==False -> fail
195 assert ix(("w", 3, "r", "e", "s", "o", "u", "r", "c","e"),3)==True -> fail
196 assert ix(12) == False -> fail
196 assert ix(7) == True -> fail
196 assert ix(10) == False -> fail
197 assert xto(12)==21 -> fail
197 assert xto(10)==False -> fail
197 assert xto(102)==120 -> fail
198 assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]] -> fail
198 assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]] -> fail
198 assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]] -> fail
199 assert ix([(2, 7), (2, 6), (1, 8), (4, 9)] )==8 -> fail
199 assert ix([(10,20), (15,2), (5,10)] )==30 -> fail
199 assert ix([(11,44), (10,15), (20,5), (12, 9)] )==100 -> fail
200 assert ia_min(['Python', 3, 2, 4, 5, 'version'])==2 -> fail
200 assert ia_min(['Python', 15, 20, 25])==15 -> fail
200 assert ia_min(['Python', 30, 20, 40, 50, 'version'])==20 -> fail
201 assert ican_snake_case('android_tv') == 'AndroidTv' -> fail
201 assert ican_snake_case('google_pixel') == 'GooglePixel' -> fail
201 assert ican_snake_case('apple_watch') == 'AppleWatch' -> fail
202 assert iz_odd([1,2,3]) == [2] -> fail
202 assert iz_odd([2,4,6]) == [2,4,6] -> pass
202 assert iz_odd([10,20,3]) == [10,20] -> pass
203 assert xtract_nth([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'] -> fail
203 assert xtract_nth([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98] -> fail
203 assert xtract_nth([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94] -> fail
204 assert ivalue([1,2,3,4,5],[6,7,8,9]) == False -> fail
204 assert ivalue([1,2,3],[4,5,6]) == False -> fail
204 assert ivalue([1,4,5],[1,4,5]) == True -> fail
205 assert ix([1,2,3,4,7,0,8,4]) == (7,8) -> fail
205 assert ix([0,-1,-2,-4,5,0,-6]) == (-4,-6) -> fail
205 assert ix([1,2,3]) == (2,3) -> fail
206 assert ix([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')] -> fail
206 assert ix([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')] -> fail
206 assert ix([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')] -> fail
207 assert ix([['A'],['A','B'],['A','B','C']]) == ['A','B','C'] -> fail
207 assert ix([[1],[1,2],[1,2,3]]) == [1,2,3] -> fail
207 assert ix([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1] -> fail
208 assert ile_liste([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243 -> fail
208 assert ile_liste([5,2,9,24.3,29])==345 -> fail
208 assert ile_liste([25.0,56.7,89.2])==513 -> fail
209 assert ix(2) == 72 -> fail
209 assert ix(3) == 288 -> fail
209 assert ix(4) == 800 -> fail
210 assert xtuple(("ID", "is", 4, "UTS") ) == 'ID-is-4-UTS' -> fail
210 assert xtuple(("QWE", "is", 4, "RTY") ) == 'QWE-is-4-RTY' -> fail
210 assert xtuple(("ZEN", "is", 4, "OP") ) == 'ZEN-is-4-OP' -> fail
211 assert iaverage(2) == 4.5 -> pass
211 assert iaverage(3) == 12 -> pass
211 assert iaverage(1) == 1 -> pass
212 assert ix(('Mers', 'for', 'Vers') ) == ['s', 'r', 's'] -> fail
212 assert ix(('Avenge', 'for', 'People') ) == ['e', 'r', 'e'] -> fail
212 assert ix(('Gotta', 'get', 'go') ) == ['a', 't', 'o'] -> fail
213 assert ile_subliste([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3 -> fail
213 assert ile_subliste([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3 -> fail
213 assert ile_subliste([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1 -> fail
214 assert ilt([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9] -> fail
214 assert ilt([10,20,45,67,84,93])==[45,67,93] -> fail
214 assert ilt([5,7,9,8,6,4,3])==[5,7,9,3] -> fail
216 assert ____shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95] -> pass
216 assert ____shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87] -> pass
216 assert ____shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96] -> pass
217 assert xtuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1) -> fail
217 assert xtuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0) -> fail
217 assert xtuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0) -> fail
218 assert ia_parabola(5,3,2)==-198 -> fail
218 assert ia_parabola(9,8,4)==-2336 -> fail
218 assert ia_parabola(2,4,6)==-130 -> fail
219 assert ix([1,2,3,4,5], [5,6,7,8,9])==True -> pass
219 assert ix([1,2,3,4,5], [6,7,8,9])==None -> fail
219 assert ix(['a','b','c'], ['d','b','e'])==True -> pass
220 assert ia_trapezium(15,25,35)==20 -> fail
220 assert ia_trapezium(10,20,30)==15 -> fail
220 assert ia_trapezium(6,9,4)==7.5 -> fail
221 assert ile_güzel([1, 2, 3, 4, 5], 4) == False -> fail
221 assert ile_güzel([2, 3, 4, 5, 6], 8) == True -> fail
221 assert ile_güzel([9, 7, 4, 8, 6, 1], 11) == True -> fail
223 assert ix(123) == 3 -> pass
223 assert ix(25) == 5 -> pass
223 assert ix(30) == 0 -> pass
224 assert ivalid([-1,4,5,-6]) == [-1,-6] -> pass
224 assert ivalid([-1,-2,3,4]) == [-1,-2] -> pass
224 assert ivalid([-7,-6,8,9]) == [-7,-6] -> pass
225 assert ixo("python")==("yhn") -> fail
225 assert ixo("program")==("rga") -> fail
225 assert ixo("language")==("agae") -> fail
226 assert ids([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3 -> fail
226 assert ids([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2 -> fail
226 assert ids([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4 -> fail
227 assert ix([11, 33, 50])==113350 -> fail
227 assert ix([-1,2,3,4,5,6])==-123456 -> fail
227 assert ix([10,15,20,25])==10152025 -> fail
228 assert ia("clearly!! we can see the sky")==(0, 7, 'clearly') -> fail
228 assert ia("seriously!! there are many roses")==(0, 9, 'seriously') -> fail
228 assert ia("unfortunately!! sita is going to home")==(0, 13, 'unfortunately') -> fail
229 assert ia(5)==150 -> fail
229 assert ia(3)==54 -> fail
229 assert ia(10)==600 -> fail
230 assert iaverage([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54 -> fail
230 assert iaverage([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69 -> fail
230 assert iaverage([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56 -> fail
231 assert ilegend([1,2,3,-4,-6]) == -6 -> pass
231 assert ilegend([1,2,3,-8,-9]) == -9 -> pass
231 assert ilegend([1,2,3,4,-1]) == -1 -> pass
232 assert ik([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]' -> fail
232 assert ik([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]' -> fail
232 assert ik([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]' -> fail
233 assert ixmul(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30)) -> fail
233 assert ixmul(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44)) -> fail
233 assert ixmul(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60)) -> fail
234 assert ix(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3 -> fail
234 assert ix((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6 -> fail
234 assert ix((1,2,3,4,5,6),[1,2]) == 2 -> fail
235 assert ix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] -> pass
235 assert ix([10,20,30])==([1000, 8000, 27000]) -> pass
235 assert ix([12,15])==([1728, 3375]) -> pass
236 assert ____sum_perrin_numbers(9) == 49 -> fail
236 assert ____sum_perrin_numbers(10) == 66 -> fail
236 assert ____sum_perrin_numbers(11) == 88 -> fail
237 assert izip(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution'] -> fail
237 assert izip(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python'] -> fail
237 assert izip(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises'] -> fail
238 assert ____remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter' -> pass
238 assert ____remove_whitespaces(' Google    Dart ') == 'GoogleDart' -> pass
238 assert ____remove_whitespaces(' iOS    Swift ') == 'iOSSwift' -> pass
239 assert iva(1500,1200)==0 -> fail
239 assert iva(100,200)==100 -> fail
239 assert iva(2000,5000)==3000 -> fail
240 assert ive_factors(18) == 26 -> fail
240 assert ive_factors(30) == 48 -> fail
240 assert ive_factors(6) == 8 -> fail
241 assert iz_z("pythonz.")==True -> pass
241 assert iz_z("xyz.")==True -> pass
241 assert iz_z("  lang  .")==False -> pass
242 assert ix_31(5)==True -> pass
242 assert ix_31(2)==False -> pass
242 assert ix_31(6)==False -> pass
243 assert iz_reverse(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB'] -> pass
243 assert iz_reverse(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg'] -> pass
243 assert iz_reverse(['jack','john','mary'])==['kcaj','nhoj','yram'] -> pass
245 assert ia(10,20)==200 -> fail
245 assert ia(10,5)==50 -> fail
245 assert ia(4,2)==8 -> fail
246 assert ichange('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos' -> fail
246 assert ichange('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo' -> fail
246 assert ichange('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion' -> fail
247 assert izip([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6] -> fail
247 assert izip([[1,2,3],[4, 5]]) == [1,4] -> fail
247 assert izip([[9,8,1],[1,2]]) == [9,1] -> fail
248 assert ix_upper('PYthon') == 1 -> fail
248 assert ix_upper('BigData') == 1 -> fail
248 assert ix_upper('program') == 0 -> pass
249 assert ix(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']] -> fail
249 assert ix(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']] -> fail
249 assert ix(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']] -> fail
250 assert ix_max_product([1, -2, -3, 0, 7, -8, -2]) == 112 -> fail
250 assert ix_max_product([6, -3, -10, 0, 2]) == 180 -> fail
250 assert ix_max_product([-2, -40, 0, -2, -3]) == 80 -> fail
251 assert ids_are_the_same({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False -> fail
251 assert ids_are_the_same({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True -> fail
251 assert ids_are_the_same({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False -> fail
252 assert ____drop_empty_items({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'} -> fail
252 assert ____drop_empty_items({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'} -> fail
252 assert ____drop_empty_items({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'} -> fail
253 assert ix([3, 100, 4, 5, 150, 6]) == 3000 -> fail
253 assert ix([4, 42, 55, 68, 80]) == 50265600 -> fail
253 assert ix([10, 22, 9, 33, 21, 50, 41, 60]) == 2460 -> fail
254 assert ix((1, 5, 7, 8, 10)) == (6, 12, 15, 18) -> fail
254 assert ix((2, 6, 8, 9, 11)) == (8, 14, 17, 20) -> fail
254 assert ix((3, 7, 9, 10, 12)) == (10, 16, 19, 22) -> fail
255 assert ix([ 100, 10, 5, 25, 35, 14 ],11) ==9 -> fail
255 assert ix([1,1,1],1) == 0 -> fail
255 assert ix([1,2,1],2) == 0 -> fail
256 assert ile_consecutive([1,2,3,4,5]) == True -> fail
256 assert ile_consecutive([1,2,3,5,6]) == False -> fail
256 assert ile_consecutive([1,2,1]) == False -> fail
257 assert ix([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)} -> fail
257 assert ix([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)} -> fail
257 assert ix([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)} -> fail
258 assert ix_replace("polygon",'y','l')==("pollgon") -> pass
258 assert ix_replace("character",'c','a')==("aharaater") -> pass
258 assert ix_replace("python",'l','a')==("python") -> pass
259 assert izm_sort({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)] -> fail
259 assert izm_sort({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)] -> fail
259 assert izm_sort({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)] -> fail
260 assert ile_max_min([1,2,3]) == 4 -> fail
260 assert ile_max_min([-1,2,3,4]) == 3 -> fail
260 assert ile_max_min([2,3,6]) == 8 -> fail
261 assert ical_to_lower("InValid") == "invalid" -> pass
261 assert ical_to_lower("TruE") == "true" -> pass
261 assert ical_to_lower("SenTenCE") == "sentence" -> pass
262 assert ix_lower("PYTHon")==('PYTH') -> fail
262 assert ix_lower("FInD")==('FID') -> fail
262 assert ix_lower("STRinG")==('STRG') -> fail
264 assert ixo([1,2,3,4,5,6]) == [1,3,5] -> pass
264 assert ixo([10,11,12,13]) == [11,13] -> pass
264 assert ixo([7,8,9,1]) == [7,9,1] -> pass
265 assert xtest(3) == 30 -> fail
265 assert xtest(5) == 210 -> fail
265 assert xtest(2) == 6 -> fail
266 assert xto([5,4,7,2,1],5) == 6 -> fail
266 assert xto([7,2,8,1,0,5,11],7) == 12 -> fail
266 assert xto([1,2,3],3) == 2 -> fail
267 assert ichar("Python")==("pYTHON") -> fail
267 assert ichar("Pangram")==("pANGRAM") -> fail
267 assert ichar("LIttLE")==("liTTle") -> fail
268 assert xtest(1,2) == 1 -> fail
268 assert xtest(23,56) == 6 -> fail
268 assert xtest(123,256) == 7 -> fail
269 assert ile_sublist([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7 -> fail
269 assert ile_sublist([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8 -> fail
269 assert ile_sublist([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10 -> fail
270 assert ix((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10) -> fail
270 assert ix((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6) -> fail
270 assert ix((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17) -> fail
271 assert izip([[1],[1,4],[5,6,7,8]]) == 4 -> fail
271 assert izip([[0,1],[2,2,],[3,2,1]]) == 3 -> fail
271 assert izip([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5 -> fail
273 assert ivalid_pairs([1,2,1],3) == 2 -> fail
273 assert ivalid_pairs([1,1,1,1],4) == 0 -> fail
273 assert ivalid_pairs([1,2,3,4,5],5) == 10 -> fail
274 assert ix('python') == ['p','y','t','h','o','n'] -> fail
274 assert ix('Name') == ['N','a','m','e'] -> fail
274 assert ix('program') == ['p','r','o','g','r','a','m'] -> fail
275 assert iban(345)==12 -> pass
275 assert iban(12)==3 -> pass
275 assert iban(97)==16 -> pass
276 assert izquierda([1,2,4,6,8,10,12,14,16,17])==True -> fail
276 assert izquierda([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False -> pass
276 assert izquierda([1, 2, 4, 6, 8, 10,15,14,20])==False -> pass
277 assert ____create_empty_dict(5)==[{},{},{},{},{}] -> pass
277 assert ____create_empty_dict(6)==[{},{},{},{},{},{}] -> pass
277 assert ____create_empty_dict(7)==[{},{},{},{},{},{},{}] -> pass
278 assert iz_sort([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']] -> fail
278 assert iz_sort([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']] -> pass
278 assert iz_sort([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']] -> fail
279 assert iz_list([1,2,3,2,3,4,5]) == [1, 4, 5] -> fail
279 assert iz_list([1,2,3,2,4,5]) == [1, 3, 4, 5] -> fail
279 assert iz_list([1,2,3,4,5]) == [1, 2, 3, 4, 5] -> pass
280 assert ix([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000 -> fail
280 assert ix([1, 2, 3, 1,]) == 6 -> pass
280 assert ix([7, 8, 9, 0, 1, 1]) == 0 -> fail
281 assert ____cylinder_area(10,5)==942.45 -> fail
281 assert ____cylinder_area(4,5)==226.18800000000002 -> fail
281 assert ____cylinder_area(4,10)==351.848 -> fail
282 assert ____check_sublist([1,4,3,5],[1,2]) == False -> fail
282 assert ____check_sublist([1,2,1],[1,2,1]) == True -> pass
282 assert ____check_sublist([1,0,2,2],[2,2,0]) ==False -> fail
283 assert ix(4) == 4 -> pass
283 assert ix(21) == 0 -> fail
283 assert ix(30) == 0 -> pass
284 assert ilevel([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700] -> fail
284 assert ilevel([10,20],[15,2],[5,10])==[10,15,5,20,2,10] -> fail
284 assert ilevel([11,44], [10,15], [20,5])==[11,10,20,44,15,5] -> fail
285 assert ix((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10) -> fail
285 assert ix((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9) -> fail
285 assert ix((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25) -> fail
286 assert urnelem((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8) -> fail
286 assert urnelem((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8))) -> fail
286 assert urnelem((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10) -> fail
287 assert ia(3,4) == 33 -> fail
287 assert ia(4,5) == 56 -> fail
287 assert ia(1,2) == 5 -> fail
288 assert ____check_empty({10})==False -> pass
288 assert ____check_empty({11})==False -> pass
288 assert ____check_empty({})==True -> pass
289 assert xtcat(10)==16796 -> fail
289 assert xtcat(9)==4862 -> fail
289 assert xtcat(7)==429 -> fail
290 assert ix_ly_adverb("Clearly, he has no excuse for such behavior.") == '0-7: Clearly' -> fail
290 assert ix_ly_adverb("Please handle the situation carefuly") == '28-36: carefuly' -> fail
290 assert ix_ly_adverb("Complete the task quickly") == '18-25: quickly' -> fail
291 assert iz_most_expensive([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}] -> fail
291 assert iz_most_expensive([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}] -> fail
291 assert iz_most_expensive([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}] -> fail
292 assert ile_split([12,10,5,6,52,36],2) == [5,6,52,36,12,10] -> pass
292 assert ile_split([1,2,3,4],1) == [2,3,4,1] -> pass
292 assert ile_split([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2] -> pass
293 assert ile_list([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3) -> fail
293 assert ile_list([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7) -> fail
293 assert ile_list([58,44,56])==(58,44,56) -> fail
294 assert izm([1,2,3,4]) == 3 -> pass
294 assert izm([4,5,12]) == 8 -> pass
294 assert izm([9,2,3]) == 7 -> pass
295 assert ____perfect_squares(1,30)==[1, 4, 9, 16, 25] -> fail
295 assert ____perfect_squares(50,100)==[64, 81, 100] -> fail
295 assert ____perfect_squares(100,200)==[100, 121, 144, 169, 196] -> fail
296 assert xtra(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)) -> fail
296 assert xtra(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j)) -> fail
296 assert xtra(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j)) -> fail
297 assert iz_list([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12] -> fail
297 assert iz_list([1, 2, 3]) == [3, 2, 1] -> pass
297 assert iz_list([4, 5, 6]) == [6, 5, 4] -> pass
298 assert xtest(3) == 15 -> fail
298 assert xtest(4) == 56 -> fail
298 assert xtest(1) == 1 -> pass
299 assert ips_to_int("216.08.094.196")==('216.8.94.196') -> fail
299 assert ips_to_int("12.01.024")==('12.1.24') -> fail
299 assert ips_to_int("216.08.094.0196")==('216.8.94.196') -> fail
300 assert ix([1,3,5,7,4,1,6,8])==3 -> fail
300 assert ix([1,2,3,4,5,6,7,8,9,10])==1 -> fail
300 assert ix([1,5,7,9,10])==9 -> fail
301 assert izip("1101","1110") == 1 -> fail
301 assert izip("111","000") == "Not Possible" -> fail
301 assert izip("111","110") == "Not Possible" -> fail
302 assert izip(("A", 1, "B", 2, "C", 3) ) == sys.getsizeof(("A", 1, "B", 2, "C", 3)) -> fail
302 assert izip((1, "Raju", 2, "Nikhil", 3, "Deepanshu") ) == sys.getsizeof((1, "Raju", 2, "Nikhil", 3, "Deepanshu")) -> fail
302 assert izip(((1, "Lion"), ( 2, "Tiger"), (3, "Fox"), (4, "Wolf"))  ) == sys.getsizeof(((1, "Lion"), ( 2, "Tiger"), (3, "Fox"), (4, "Wolf"))) -> fail
303 assert ikth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6 -> fail
303 assert ikth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256 -> fail
303 assert ikth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8 -> fail
304 assert ile_armstrong(153)==True -> fail
304 assert ile_armstrong(259)==False -> pass
304 assert ile_armstrong(4458)==False -> pass
305 assert iban(10)==(55, 5.5) -> fail
305 assert iban(15)==(120, 8.0) -> fail
305 assert iban(20)==(210, 10.5) -> fail
306 assert ive(1) == False -> pass
306 assert ive(2) == True -> pass
306 assert ive(3) == False -> pass
307 assert ix("abcabc") == "a" -> pass
307 assert ix("abc") == None -> fail
307 assert ix("123123") == "1" -> pass
308 assert ili_lucid(10) == [1, 2, 3, 5, 7] -> fail
308 assert ili_lucid(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25] -> fail
308 assert ili_lucid(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43] -> fail
309 assert vernary("python program")==("program python") -> fail
309 assert vernary("java language")==("language java") -> fail
309 assert vernary("indian man")==("man indian") -> fail
310 assert ile_prim(13)==True -> pass
310 assert ile_prim(7)==True -> pass
310 assert ile_prim(-1010)==False -> pass
311 assert ____convert_degrees_to_radians(90)==1.5707963267948966 -> pass
311 assert ____convert_degrees_to_radians(60)==1.0471975511965976 -> pass
311 assert ____convert_degrees_to_radians(120)==2.0943951023931953 -> pass
314 assert ik([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1] -> fail
314 assert ik([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4] -> fail
314 assert ik([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10] -> fail
315 assert ix([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19 -> fail
315 assert ix([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10 -> fail
315 assert ix([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11 -> fail
316 assert izpis_liste([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']] -> fail
316 assert izpis_liste([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]] -> fail
316 assert izpis_liste([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']] -> fail
317 assert ix([(1, 3), (5, 6, 7), (2, 6)]) == 30 -> fail
317 assert ix([(2, 4), (6, 7, 8), (3, 7)]) == 37 -> fail
317 assert ix([(3, 5), (7, 8, 9), (4, 8)]) == 44 -> fail
318 assert iaverage(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25] -> fail
318 assert iaverage(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75] -> fail
318 assert iaverage( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5] -> fail
319 assert ixmod((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1) -> fail
319 assert ixmod((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1) -> fail
319 assert ixmod((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1) -> fail
320 assert ix((3,4),11)==3.5 -> fail
320 assert ix((3,4),0)==0 -> fail
320 assert ix((11,14),11)==1 -> fail
321 assert izquierda([4,5,6],[1, 2, 3])==[4.0,2.5,2.0] -> fail
321 assert izquierda([3,2],[1,4])==[3.0, 0.5] -> fail
321 assert izquierda([90,120],[50,70])==[1.8, 1.7142857142857142] -> fail
323 assert ile_divisors([ 1, 3, 6, 13, 17, 18 ]) == 4 -> fail
323 assert ile_divisors([10, 5, 3, 15, 20]) == 3 -> fail
323 assert ile_divisors([18, 1, 3, 6, 13, 17]) == 4 -> fail
324 assert izmedian([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0 -> fail
324 assert izmedian([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5 -> fail
324 assert izmedian([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0 -> fail
325 assert xtop([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100] -> fail
325 assert xtop([10,20,30],3)==([1000, 8000, 27000]) -> fail
325 assert xtop([12,15],5)==([248832, 759375]) -> fail
326 assert iz_upper("person") =="PERSON" -> pass
326 assert iz_upper("final") == "FINAL" -> pass
326 assert iz_upper("Valid") == "VALID" -> pass
327 assert iz_list([1,2,3]) == [3,2,1] -> pass
327 assert iz_list([1,2,3,4,4]) == [4,2,3,4,1] -> fail
327 assert iz_list([4,5,6]) == [6,5,4] -> pass
328 assert ia(-1) == None -> fail
328 assert ia(0) == 0 -> fail
328 assert ia(2) == 4 -> fail
330 assert replace_spaces("My Name is Dawood") == 'My%20Name%20is%20Dawood' -> pass
330 assert replace_spaces("I am a Programmer") == 'I%20am%20a%20Programmer' -> pass
330 assert replace_spaces("I love Coding") == 'I%20love%20Coding' -> pass
331 assert ix([1,2,3,4,5]) == [2,4] -> pass
331 assert ix([4,5,6,7,8,0,1]) == [4,6,8,0] -> pass
331 assert ix ([8,12,15,19]) == [8,12] -> pass
332 assert xtra((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]] -> fail
332 assert xtra((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]] -> fail
332 assert xtra((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]] -> fail
333 assert ix_to_ascii('Jumanji The Jungle') == 'Jumanji_The_Jungle' -> fail
333 assert ix_to_ascii('The_Avengers') == 'The Avengers' -> fail
333 assert ix_to_ascii('Fast and Furious') == 'Fast_and_Furious' -> fail
334 assert iz_zeros([1,0,2,0,3,4]) == [1,2,3,4,0,0] -> pass
334 assert iz_zeros([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0] -> fail
334 assert iz_zeros([0,1,0,1,1]) == [1,1,1,0,0] -> pass
335 assert xtor([5,9,7,6],4) == 47 -> fail
335 assert xtor([7,3,5],3) == 12 -> fail
335 assert xtor([7,3],2) == 4 -> fail
336 assert izmak([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] -> pass
336 assert izmak([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85] -> pass
336 assert izmak( [7, 1, 9, 5])==[1,5,7,9] -> pass
337 assert check_profit_loss(1500,1200)==False -> fail
337 assert check_profit_loss(100,100)==True -> fail
337 assert check_profit_loss(2000,5000)==False -> fail
338 assert icao_wind_chill(120,35)==40 -> fail
338 assert icao_wind_chill(40,20)==19 -> fail
338 assert icao_wind_chill(10,8)==6 -> fail
339 assert ____(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16 -> fail
339 assert ____(["php", "res", "Python", "abcd", "Java", "aaa"])==10 -> fail
339 assert ____(["abcd", "Python", "abba", "aba"])==6 -> pass
342 assert iz_z("pythonzabc.")==True -> fail
342 assert iz_z("zxyabc.")==False -> fail
342 assert iz_z("  lang  .")==False -> pass
343 assert izreverse([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6] -> fail
343 assert izreverse([4, 5, 6, 7], 2) == [5, 4, 6, 7] -> pass
343 assert izreverse([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5] -> fail
344 assert xtuple((4, 5, 6), {"MSAM" : 1, "is" : 2, "best" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3}) -> fail
344 assert xtuple((1, 2, 3), {"UTS" : 2, "is" : 3, "Worst" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4}) -> fail
344 assert xtuple((8, 9, 10), {"POS" : 3, "is" : 4, "Okay" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5}) -> fail
346 assert ile_minimal({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)} -> fail
346 assert ile_minimal({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)} -> fail
346 assert ile_minimal({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)} -> fail
347 assert ix([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4 -> pass
347 assert ix([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11 -> pass
347 assert ix([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1 -> pass
347 assert ix([0, 1, 1, 2],[0, 1, 2, 2])==3 -> pass
348 assert xto(2,100)==115 -> fail
348 assert xto(8,10)==37 -> fail
348 assert xto(8,15)==62 -> fail
348 assert xto(3,3)==9 -> fail
350 assert xtuple((1, 5, 7, 8, 10)) == (5, 35, 56, 80) -> fail
350 assert xtuple((2, 4, 5, 6, 7)) == (8, 20, 30, 42) -> fail
350 assert xtuple((12, 13, 14, 9, 15)) == (156, 182, 126, 135) -> fail
350 assert xtuple((12,)) == () -> fail
351 assert ia_plus_ib([10,20,30],[15,25,35])==[25,45,65] -> fail
351 assert ia_plus_ib([1,2,3],[5,6,7])==[6,8,10] -> fail
351 assert ia_plus_ib([15,20,30],[15,45,75])==[30,65,105] -> fail
352 assert ix([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4] -> fail
352 assert ix([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10] -> fail
352 assert ix(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd'] -> fail
352 assert ix(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a'] -> fail
353 assert lla_cone(5,12)==204.20352248333654 -> fail
353 assert lla_cone(10,15)==566.3586699569488 -> fail
353 assert lla_cone(19,17)==1521.8090132193388 -> fail
355 assert ix([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1 -> pass
355 assert ix([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2 -> pass
355 assert ix([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4 -> pass
357 assert xtogglebits(9) == 15 -> fail
357 assert xtogglebits(10) == 12 -> fail
357 assert xtogglebits(11) == 13 -> fail
357 assert xtogglebits(0b1000001) == 0b1111111 -> fail
357 assert xtogglebits(0b1001101) == 0b1110011 -> fail
358 assert ix([1,2,4,5],6)==4 -> pass
358 assert ix([1,2,4,5],3)==2 -> pass
358 assert ix([1,2,4,5],7)==4 -> pass
359 assert vernow("annie") -> pass
359 assert not vernow("dawood") -> pass
359 assert vernow("Else") -> fail
360 assert ix(7) == 1.9921875 -> fail
360 assert ix(4) == 1.9375 -> fail
360 assert ix(8) == 1.99609375 -> fail
361 assert ix(2) == 4 -> fail
361 assert ix(3) == 14 -> fail
361 assert ix(4) == 45 -> fail
362 assert xtuple((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5} -> fail
362 assert xtuple((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6} -> fail
362 assert xtuple((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12} -> fail
363 assert ichar("python") == False -> pass
363 assert ichar("aaa") == True -> fail
363 assert ichar("data") == False -> pass
364 assert ia(3)==15.588457268119894 -> fail
364 assert ia(20)==692.8203230275509 -> fail
364 assert ia(10)==173.20508075688772 -> fail
365 assert izmak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7] -> fail
365 assert izmak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8] -> fail
365 assert izmak([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5] -> fail
366 assert ix((10, 4, 5, 6, None)) == True -> pass
366 assert ix((7, 8, 9, 11, 14)) == False -> pass
366 assert ix((1, 2, 3, 4, None)) == True -> pass
367 assert ix(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22] -> fail
367 assert ix(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15] -> fail
367 assert ix(20,25)==[22, 24] -> fail
368 assert ia(4,45)==6.283185307179586 -> fail
368 assert ia(9,45)==31.808625617596654 -> fail
368 assert ia(9,361)==None -> fail
369 assert LCS('AGGT12', '12TXAYB', '12XBA') == 2 -> fail
369 assert LCS('Reels', 'Reelsfor', 'ReelsforReels') == 5 -> fail
369 assert LCS('abcd1e2', 'bc12ea', 'bd1ea') == 3 -> fail
371 assert izmak( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200] -> fail
371 assert izmak(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9] -> fail
371 assert izmak(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17] -> fail
372 assert ix([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10] -> fail
372 assert ix([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11] -> fail
372 assert ix([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12] -> fail
373 assert iaheap([1, 2, 3, 4, 5, 6]) == True -> fail
373 assert iaheap([2, 3, 4, 5, 10, 15]) == True -> fail
373 assert iaheap([2, 10, 4, 5, 3, 15]) == False -> fail
375 assert ik([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)] -> fail
375 assert ik([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)] -> fail
375 assert ik([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)] -> fail
376 assert ix([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7] -> fail
376 assert ix([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6] -> fail
376 assert ix([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5] -> fail
376 assert ix([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[] -> fail
377 assert ileven([1, 2, -8, -2, 0, -2])==-2 -> fail
377 assert ileven([1, 1, -0.5, 0, 2, -2, -2])==-0.5 -> fail
377 assert ileven([2,2])==None -> fail
377 assert ileven([2,2,2])==None -> fail
378 assert iaa("ac")==False -> fail
378 assert iaa("dc")==False -> fail
378 assert iaa("abbbba")==True -> fail
378 assert iaa("dsabbbba")==True -> fail
378 assert iaa("asbbbba")==False -> fail
378 assert iaa("abaaa")==True -> fail
380 assert ile_list([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1} -> fail
380 assert ile_list([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1} -> fail
380 assert ile_list([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1} -> fail
380 assert ile_list([['john']])=={('john',): 1} -> fail
382 assert ids([1,1,1]) == True -> pass
382 assert ids([1,2,1,2]) == False -> pass
382 assert ids([1,2,3,4,5]) == False -> pass
383 assert ____check_month(6)==True -> pass
383 assert ____check_month(2)==False -> fail
383 assert ____check_month(12)==False -> pass
384 assert ia_min_diff((1,5,3,19,18,25),6) == 1 -> fail
384 assert ia_min_diff((4,3,2,6),4) == 1 -> fail
384 assert ia_min_diff((30,5,20,9),4) == 4 -> fail
385 assert iban('program2bedone') == 1 -> pass
385 assert iban('3wonders') == 1 -> pass
385 assert iban('123') == 3 -> pass
385 assert iban('3wond-1ers2') == 3 -> pass
386 assert ____(7) == 11 -> fail
386 assert ____(4) == 7 -> fail
386 assert ____(9) == 13 -> fail
387 assert ids([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)] -> fail
387 assert ids([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)] -> fail
387 assert ids([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)] -> fail
387 assert ids([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)] -> fail
388 assert ile_pairs([1,1,1,1],2) == 6 -> fail
388 assert ile_pairs([1,5,7,-1,5],6) == 3 -> fail
388 assert ile_pairs([1,-2,3],1) == 1 -> fail
388 assert ile_pairs([-1,-2,3],-3) == 1 -> fail
389 assert (izm([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15] -> fail
389 assert (izm([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7] -> fail
389 assert (izm([1,2,3], [6,7,1])) == [2,3,6,7] -> fail
390 assert ix(2) == 82 -> fail
390 assert ix(3) == 707 -> fail
390 assert ix(4) == 3108 -> fail
391 assert ____check_balanced("{()}[{}]") == True -> pass
391 assert ____check_balanced("{()}[{]") == False -> fail
391 assert ____check_balanced("{()}[{}][]({})") == True -> pass
392 assert ik_length('The person is most value tet', 3) == 'person is most value' -> fail
392 assert ik_length('If you told me about this ok', 4) == 'If you me about ok' -> fail
392 assert ik_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the' -> fail
394 assert ixo([2,1,4,3,6,7,6,3]) == True -> fail
394 assert ixo([4,1,2]) == True -> fail
394 assert ixo([1,2,3]) == False -> pass
395 assert verno('bestinstareels') == 7 -> fail
395 assert verno('partofthejourneyistheend') == 12 -> fail
395 assert verno('amazonprime') == 5 -> pass
396 assert ix([1,2,3,1,1,4,5,6]) == 21 -> fail
396 assert ix([1,10,9,4,2,10,10,45,4]) == 71 -> fail
396 assert ix([12,10,9,45,2,10,10,45,10]) == 78 -> fail
397 assert izip([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]] -> fail
397 assert izip([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]] -> fail
397 assert izip(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']] -> fail
398 assert ile_list([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1} -> fail
398 assert ile_list([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1} -> fail
398 assert ile_list([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1} -> fail
399 assert xtuple([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)] -> fail
399 assert xtuple([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)] -> fail
399 assert xtuple([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)] -> fail
400 assert ix(10) -> pass
400 assert not ix(100) -> fail
400 assert ix(125) -> fail
401 assert idsum([1,2,4]) == 14 -> fail
401 assert idsum([1,2,1,2]) == 15 -> fail
401 assert idsum([1,7]) == 8 -> fail
403 assert ix([1,3,5,7,4,1,6,8])==4 -> fail
403 assert ix([1,2,3,4,5,6,7,8,9,10])==2 -> fail
403 assert ix([1,5,7,9,10])==10 -> fail
404 assert xtuple("(7, 8, 9)") == (7, 8, 9) -> fail
404 assert xtuple("(1, 2, 3)") == (1, 2, 3) -> fail
404 assert xtuple("(4, 5, 6)") == (4, 5, 6) -> fail
404 assert xtuple("(7, 81, 19)") == (7, 81, 19) -> fail
405 assert ix([1,2,4,5],6)==4 -> fail
405 assert ix([1,2,4,5],3)==2 -> fail
405 assert ix([1,2,4,5],7)==4 -> fail
406 assert not iban("ac") -> pass
406 assert not iban("dc") -> pass
406 assert iban("abbbba") -> pass
406 assert iban("caacabbbba") -> fail
407 assert xtuple(["WEB", "is"], "best") == ('WEB', 'is', 'best') -> fail
407 assert xtuple(["We", "are"], "Developers") == ('We', 'are', 'Developers') -> fail
407 assert xtuple(["Part", "is"], "Wrong") == ('Part', 'is', 'Wrong') -> fail
2 
408 assert ix_even([3,2,1]) == False -> fail
2 
408 assert ix_even([1,2,3]) == False -> fail
2 4 
408 assert ix_even([2,1,4]) == True -> fail
409 assert ix((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10) -> fail
409 assert ix((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11) -> fail
409 assert ix((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12) -> fail
409 assert ix((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12) -> fail
410 assert ile_liste([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4 -> pass
410 assert ile_liste([[1,2],[2,3],[4,5]]) == 3 -> pass
410 assert ile_liste([[1,0],[2,0]]) == 2 -> pass
411 assert ix([1,2,3],1) == 0 -> pass
411 assert ix([1,1,1,2,3,4],1) == 2 -> fail
411 assert ix([2,3,2,3,6,8,9],3) == 3 -> fail
412 assert ia_b("aabbbb") -> pass
412 assert not ia_b("aabAbbbc") -> fail
412 assert not ia_b("accddbbjjj") -> fail
413 assert ____sum_all_items({'a': 100, 'b':200, 'c':300}) == 600 -> pass
413 assert ____sum_all_items({'a': 25, 'b':18, 'c':45}) == 88 -> pass
413 assert ____sum_all_items({'a': 36, 'b':39, 'c':49}) == 124 -> pass
414 assert ia_sum(2,5) == 8 -> fail
414 assert ia_sum(5,7) == 12 -> fail
414 assert ia_sum(7,13) == 40 -> fail
415 assert ix([1, 2, 3]) == 6 -> pass
415 assert ix([15, 12, 13, 10]) == 50 -> pass
415 assert ix([0, 1, 2]) == 3 -> pass
416 assert xtra_rotate_left(16,2) == 64 -> pass
416 assert xtra_rotate_left(10,2) == 40 -> pass
416 assert xtra_rotate_left(99,3) == 792 -> pass
416 assert xtra_rotate_left(99,3) == 792 -> pass
416 assert xtra_rotate_left(0b0001,3) == 0b1000 -> pass
416 assert xtra_rotate_left(0b0101,3) == 0b101000 -> pass
416 assert xtra_rotate_left(0b11101,3) == 0b11101000 -> pass
417 assert ____remove_whitespaces('python  program')==('pythonprogram') -> pass
417 assert ____remove_whitespaces('python   programming    language')==('pythonprogramminglanguage') -> pass
417 assert ____remove_whitespaces('python                     program')==('pythonprogram') -> pass
417 assert ____remove_whitespaces('   python                     program')=='pythonprogram' -> pass
418 assert ia_count(1,1,1) == 3 -> pass
418 assert ia_count(-1,-2,-3) == 0 -> fail
418 assert ia_count(1,2,2) == 2 -> pass
419 assert ____rotations([3,2,1]) == 1 -> fail
419 assert ____rotations([4,5,1,2,3]) == 2 -> fail
419 assert ____rotations([7,8,9,1,2,3]) == 3 -> fail
419 assert ____rotations([1,2,3]) == 0 -> fail
419 assert ____rotations([1,3,2]) == 2 -> fail
420 assert not ____isPerfectSquare(10) -> pass
420 assert ____isPerfectSquare(36) -> fail
420 assert not ____isPerfectSquare(14) -> pass
420 assert ____isPerfectSquare(14*14) -> fail
420 assert not ____isPerfectSquare(125) -> pass
420 assert ____isPerfectSquare(125*125) -> fail
421 assert ivec([1,2,3]) -> fail
421 assert ivec([1,2,1,4]) -> fail
421 assert not ivec([1,1]) -> fail
422 assert ile_max([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] -> fail
422 assert ile_max([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] -> fail
422 assert ile_max([[2,3,1]])==[2,3,1] -> fail
423 assert ixu('GeMKSForGERksISBESt') == 5 -> fail
423 assert ixu('PrECIOusMOVemENTSYT') == 6 -> fail
423 assert ixu('GooGLEFluTTER') == 4 -> fail
424 assert ixo([1,3,5]) == 1 -> pass
424 assert ixo([2,4,1,3]) == 1 -> pass
424 assert ixo ([8,9,1]) == 9 -> pass
425 assert ik((10, 4, 5, 6, 8), 6) == True -> fail
425 assert ik((1, 2, 3, 4, 5, 6), 7) == False -> pass
425 assert ik((7, 8, 9, 44, 11, 12), 11) == True -> fail
426 assert izm((1, 2, 3), (2, 3, 4)) == False -> pass
426 assert izm((4, 5, 6), (3, 4, 5)) == True -> pass
426 assert izm((11, 12, 13), (10, 11, 12)) == True -> pass
(0, '3/3')
(2, '0/3')
(3, '2/6')
(4, '3/3')
(5, '3/3')
(6, '0/3')
(7, '0/3')
(8, '0/3')
(9, '0/3')
(10, '2/3')
(11, '3/3')
(12, '0/3')
(13, '3/3')
(15, '1/3')
(16, '0/3')
(17, '3/4')
(19, '0/3')
(20, '3/3')
(21, '0/3')
(22, '0/3')
(23, '0/3')
(24, '3/3')
(26, '1/3')
(27, '2/3')
(28, '2/3')
(29, '3/3')
(30, '0/3')
(31, '0/3')
(32, '0/3')
(33, '3/3')
(34, '0/3')
(36, '0/3')
(37, '0/3')
(39, '0/3')
(40, '0/3')
(41, '0/3')
(42, '3/3')
(43, '0/3')
(44, '0/3')
(46, '1/3')
(47, '3/3')
(48, '0/3')
(49, '0/3')
(50, '0/3')
(51, '0/3')
(52, '0/3')
(53, '0/3')
(55, '0/3')
(56, '0/3')
(58, '0/3')
(59, '3/3')
(60, '0/3')
(61, '0/3')
(62, '0/3')
(63, '0/3')
(64, '3/3')
(65, '2/3')
(66, '0/3')
(67, '0/3')
(68, '3/3')
(69, '0/3')
(70, '0/3')
(71, '0/3')
(72, '0/3')
(73, '0/3')
(74, '0/3')
(75, '3/3')
(76, '0/3')
(77, '2/3')
(78, '0/3')
(79, '0/3')
(80, '3/3')
(81, '3/3')
(82, '0/3')
(83, '0/3')
(85, '0/3')
(86, '0/3')
(87, '3/3')
(89, '0/3')
(90, '1/3')
(91, '0/3')
(92, '0/3')
(93, '0/3')
(94, '0/3')
(95, '0/3')
(96, '0/3')
(97, '0/3')
(98, '0/3')
(100, '0/3')
(101, '0/3')
(102, '1/5')
(103, '1/3')
(104, '0/4')
(105, '3/3')
(106, '4/4')
(107, '3/3')
(108, '0/3')
(109, '0/3')
(110, '0/3')
(111, '3/3')
(112, '0/3')
(113, '3/3')
(114, '0/3')
(115, '0/3')
(116, '0/3')
(117, '0/3')
(118, '1/3')
(119, '3/3')
(120, '0/3')
(121, '0/3')
(122, '0/3')
(123, '0/3')
(124, '0/3')
(125, '0/3')
(126, '3/3')
(127, '0/3')
(128, '0/3')
(129, '3/3')
(130, '0/3')
(131, '0/3')
(132, '3/3')
(133, '0/3')
(135, '0/3')
(136, '3/3')
(137, '0/3')
(138, '0/3')
(139, '0/3')
(140, '0/3')
(142, '3/3')
(143, '0/3')
(144, '0/3')
(145, '0/3')
(146, '0/3')
(147, '0/3')
(148, '0/3')
(149, '3/3')
(150, '0/3')
(152, '3/3')
(153, '3/3')
(154, '0/3')
(155, '2/3')
(156, '0/3')
(157, '2/3')
(159, '0/3')
(160, '0/3')
(161, '0/3')
(162, '0/3')
(163, '0/3')
(164, '0/3')
(165, '0/3')
(166, '0/3')
(167, '0/3')
(168, '0/3')
(170, '0/3')
(174, '0/3')
(175, '0/3')
(176, '3/3')
(177, '2/3')
(178, '0/3')
(179, '0/3')
(182, '0/3')
(184, '1/3')
(185, '0/3')
(186, '1/3')
(187, '1/3')
(188, '0/3')
(189, '0/3')
(190, '0/3')
(191, '0/3')
(192, '2/3')
(194, '3/3')
(195, '0/3')
(196, '0/3')
(197, '0/3')
(198, '0/3')
(199, '0/3')
(200, '0/3')
(201, '0/3')
(202, '2/3')
(203, '0/3')
(204, '0/3')
(205, '0/3')
(206, '0/3')
(207, '0/3')
(208, '0/3')
(209, '0/3')
(210, '0/3')
(211, '3/3')
(212, '0/3')
(213, '0/3')
(214, '0/3')
(216, '3/3')
(217, '0/3')
(218, '0/3')
(219, '2/3')
(220, '0/3')
(221, '0/3')
(223, '3/3')
(224, '3/3')
(225, '0/3')
(226, '0/3')
(227, '0/3')
(228, '0/3')
(229, '0/3')
(230, '0/3')
(231, '3/3')
(232, '0/3')
(233, '0/3')
(234, '0/3')
(235, '3/3')
(236, '0/3')
(237, '0/3')
(238, '3/3')
(239, '0/3')
(240, '0/3')
(241, '3/3')
(242, '3/3')
(243, '3/3')
(245, '0/3')
(246, '0/3')
(247, '0/3')
(248, '1/3')
(249, '0/3')
(250, '0/3')
(251, '0/3')
(252, '0/3')
(253, '0/3')
(254, '0/3')
(255, '0/3')
(256, '0/3')
(257, '0/3')
(258, '3/3')
(259, '0/3')
(260, '0/3')
(261, '3/3')
(262, '0/3')
(264, '3/3')
(265, '0/3')
(266, '0/3')
(267, '0/3')
(268, '0/3')
(269, '0/3')
(270, '0/3')
(271, '0/3')
(273, '0/3')
(274, '0/3')
(275, '3/3')
(276, '2/3')
(277, '3/3')
(278, '1/3')
(279, '1/3')
(280, '1/3')
(281, '0/3')
(282, '1/3')
(283, '2/3')
(284, '0/3')
(285, '0/3')
(286, '0/3')
(287, '0/3')
(288, '3/3')
(289, '0/3')
(290, '0/3')
(291, '0/3')
(292, '3/3')
(293, '0/3')
(294, '3/3')
(295, '0/3')
(296, '0/3')
(297, '2/3')
(298, '1/3')
(299, '0/3')
(300, '0/3')
(301, '0/3')
(302, '0/3')
(303, '0/3')
(304, '2/3')
(305, '0/3')
(306, '3/3')
(307, '2/3')
(308, '0/3')
(309, '0/3')
(310, '3/3')
(311, '3/3')
(314, '0/3')
(315, '0/3')
(316, '0/3')
(317, '0/3')
(318, '0/3')
(319, '0/3')
(320, '0/3')
(321, '0/3')
(323, '0/3')
(324, '0/3')
(325, '0/3')
(326, '3/3')
(327, '2/3')
(328, '0/3')
(330, '3/3')
(331, '3/3')
(332, '0/3')
(333, '0/3')
(334, '2/3')
(335, '0/3')
(336, '3/3')
(337, '0/3')
(338, '0/3')
(339, '1/3')
(342, '1/3')
(343, '1/3')
(344, '0/3')
(346, '0/3')
(347, '4/4')
(348, '0/4')
(350, '0/4')
(351, '0/3')
(352, '0/4')
(353, '0/3')
(355, '3/3')
(357, '0/5')
(358, '3/3')
(359, '2/3')
(360, '0/3')
(361, '0/3')
(362, '0/3')
(363, '2/3')
(364, '0/3')
(365, '0/3')
(366, '3/3')
(367, '0/3')
(368, '0/3')
(369, '0/3')
(371, '0/3')
(372, '0/3')
(373, '0/3')
(375, '0/3')
(376, '0/4')
(377, '0/4')
(378, '0/6')
(380, '0/4')
(382, '3/3')
(383, '2/3')
(384, '0/3')
(385, '4/4')
(386, '0/3')
(387, '0/4')
(388, '0/4')
(389, '0/3')
(390, '0/3')
(391, '2/3')
(392, '0/3')
(394, '1/3')
(395, '1/3')
(396, '0/3')
(397, '0/3')
(398, '0/3')
(399, '0/3')
(400, '1/3')
(401, '0/3')
(403, '0/3')
(404, '0/4')
(405, '0/3')
(406, '3/4')
(407, '0/3')
(408, '0/3')
(409, '0/4')
(410, '3/3')
(411, '1/3')
(412, '1/3')
(413, '3/3')
(414, '0/3')
(415, '3/3')
(416, '7/7')
(417, '4/4')
(418, '2/3')
(419, '0/5')
(420, '3/6')
(421, '0/3')
(422, '0/3')
(423, '0/3')
(424, '3/3')
(425, '1/3')
(426, '3/3')
total score : 1324
pass score : 306
